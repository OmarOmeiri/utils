{"version":3,"file":"objectFuncs.js","sourceRoot":"","sources":["../../../src/Objects/objectFuncs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/**\n * JSON utility functions\n * @module JSONUtils\n * @category JSON\n */\n\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-restricted-syntax */\nimport lodash, {\n  cloneDeep, isEqual,\n} from 'lodash';\nimport { ArraySortOrder, sortNumArray, sortStrArr } from '../Arrays';\nimport { isNullOrUndefined } from '../Misc/miscFuncs';\n\n/**\n * Recursively finds all possible paths in an object\n * @param obj\n * @param path\n * @returns\n */\nfunction rKeys(obj: {[key: string]: any}, path = ''): any {\n  if (!obj || typeof obj !== 'object') return path;\n  return Object.keys(obj).map((key) => rKeys(obj[key], path ? [path, key].join('.') : key));\n}\n\n/**\n * Returns a list of all object paths\n * @param o\n * @returns\n *\n * @example\n * const obj = {\n *  a: 1,\n *  b: [1, 2],\n *  c: {d: 'test', e: 'vai'},\n * }\n *\n * objectPaths(obj) => [ 'a', 'b.0', 'b.1', 'c.d', 'c.e' ]\n *\n *\n * NOTE: Returns arrays in dot notation\n */\nexport const objectPaths = (obj: {[key: string]: any}): string[] => rKeys(obj).toString().split(',');\n\n/**\n * Returns an object with all paths and values\n * @param o\n * @returns\n *\n * @example\n * const obj = {\n *  a: 1,\n *  b: [1, 2],\n *  c: {d: 'test', e: 'vai'},\n * }\n *\n * objectPathsWithValues(obj) => {\n *   a: 1,\n *  'b.0': 1,\n *  'b.1': 2,\n *  'c.d': 'test',\n *  'c.e': 'vai',\n * }\n *\n */\nexport const objectPathsWithValues = (obj: {[key: string]: any}): {[key: string]: any} => {\n  const paths = objectPaths(obj);\n  const pathsWithVals: {[key: string]: any} = {};\n  paths.forEach((p) => {\n    pathsWithVals[p] = lodash.get(obj, p);\n  });\n  return pathsWithVals;\n};\n\n/**\n * Finds a value by a property name in an object or array\n *\n * Returns the first match\n *\n * @param data\n * @param keyNameOrPattern\n * @returns\n */\n type ValByProp<O extends Record<string, unknown>, K extends keyof O> =\n KeyExists<O, K> extends true\n ? O[K]\n : undefined\nexport function valueByProperty<V, T extends Record<string, V>, K extends keyof T>(data: T | T[], keyNameOrPattern: K): ValByProp<T, K>\nexport function valueByProperty<V, T extends Record<string, V>>(data: T | T[], keyNameOrPattern: RegExp): V | undefined\nexport function valueByProperty<V, T extends Record<string, V>>(data: T | T[], keyNameOrPattern: string): V | undefined\n// eslint-disable-next-line require-jsdoc\nexport function valueByProperty<V, T extends Record<string, V>, K extends keyof T>(data: T | T[], keyNameOrPattern: K | RegExp): V | ValByProp<T, K> | undefined {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) {\n      const entry = (data as any)[key];\n      if (typeof keyNameOrPattern === 'string' && key === keyNameOrPattern) {\n        return entry;\n      }\n      if (keyNameOrPattern instanceof RegExp && keyNameOrPattern.test(key)) {\n        return entry;\n      }\n\n      if (typeof entry === 'object') {\n        // @ts-ignore\n        const found = valueByProperty(entry, keyNameOrPattern);\n\n        if (found) { return found; }\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Performs a map of the 'valueByProperty' and\n * returns all matching values of keys\n * @param data\n * @param keyNameOrPattern\n * @returns\n */\nexport function valuesByProperty<V, T extends Record<string, V>, K extends keyof T>(data: T[], keyNameOrPattern: K): ValByProp<T, K>[]\nexport function valuesByProperty<V, T extends Record<string, V>>(data: T[], keyNameOrPattern: RegExp): V[]\nexport function valuesByProperty<V, T extends Record<string, V>>(data: T | T[], keyNameOrPattern: string): V | undefined\n// eslint-disable-next-line require-jsdoc\nexport function valuesByProperty<V, T extends Record<string, V>, K extends keyof T>(data: T[], keyNameOrPattern: K | RegExp): ValByProp<Record<string, unknown>, K & string>[] {\n  const found = data.map((entry) => valueByProperty(entry, keyNameOrPattern as K & string));\n  return found.filter((v) => typeof v !== 'undefined');\n}\n\n/**\n * Returns an array of object keys sorted\n *\n * IMPORTANT:\n * Sorts in ascending order by default\n * @param obj\n * @param order\n * @returns\n */\nexport const sortObjKeys = <T extends Record<string | number, unknown>, K extends keyof T>(obj: T, order: ArraySortOrder = 'asc'): K[] => {\n  const keys = Object.keys(obj);\n  let isNum = true;\n  for (const key of keys) {\n    if (Number.isNaN(Number(key))) {\n      isNum = false;\n      break;\n    }\n  }\n  if (isNum) {\n    return sortNumArray(keys.map(Number), order) as K[];\n  }\n  return sortStrArr(keys, order) as K[];\n};\n\ninterface IGetPathByKey {\n  key: string,\n  obj: Record<string, any>\n  pathToKey?: string,\n}\n\n/**\n * Get the JSON path for a given key.\n * @param options\n */\nexport function getObjPathByKey(options: IGetPathByKey): string[] {\n  const results: string[] = [];\n\n  // eslint-disable-next-line require-jsdoc\n  function findKey({\n    key,\n    obj,\n    pathToKey,\n  }: IGetPathByKey) {\n    const oldPath = `${pathToKey ? `${pathToKey}.` : ''}`;\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      results.push(`${oldPath}${key}`);\n      return;\n    }\n\n    if (obj !== null && typeof obj === 'object' && !Array.isArray(obj)) {\n      for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)) {\n          if (Array.isArray(obj[k])) {\n            for (let j = 0; j < obj[k].length; j += 1) {\n              findKey({\n                obj: obj[k][j],\n                key,\n                pathToKey: `${oldPath}${k}[${j}]`,\n              });\n            }\n          }\n\n          if (obj[k] !== null && typeof obj[k] === 'object') {\n            findKey({\n              obj: obj[k],\n              key,\n              pathToKey: `${oldPath}${k}`,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  findKey(options);\n\n  return results;\n}\n\n/**\n * Recursively remove keys from an object\n * @example\n *\n * const input = {\n *   id: 1,\n *   name: '123',\n *   createdAt: '1020209',\n *   address: {\n *     id: 1,\n *     name: '123',\n *   },\n *   variants: [\n *     20,\n *     {\n *       id: 22,\n *       title: 'hello world',\n *       name: '123',\n *       createdAt: '1020209',\n *       variantOption: {\n *         id: 1,\n *         name: '123',\n *       },\n *     },\n *     {\n *       id: 32,\n *       name: '123',\n *       createdAt: '1020209',\n *     },\n *   ],\n * }\n *\n * omitDeep(input, ['createdAt', 'name'])\n *\n * {\n *   id: 1,\n *   address: { id: 1 },\n *   variants: [\n *     20,\n *     { id: 22, title: 'hello world', variantOption: { id: 1 } },\n *     { id: 32 }\n *   ]\n * }\n *\n *\n * @param {object} input\n * @param {Array<number | string>>} excludes\n * @return {object}\n */\nexport function omitDeep<T extends Record<string, unknown>>(input: T, excludes: Array<number | string>): Partial<T> {\n  return Object.entries(input).reduce((nextInput, [key, value]) => {\n    const shouldExclude = excludes.includes(key);\n    if (shouldExclude) return nextInput;\n\n    if (Array.isArray(value)) {\n      const arrValue = value;\n      const nextValue = arrValue.map((arrItem) => {\n        if (typeof arrItem === 'object') {\n          return omitDeep(arrItem, excludes);\n        }\n        return arrItem;\n      });\n      // @ts-ignore\n      nextInput[key] = nextValue;\n      return nextInput;\n    } if (typeof value === 'object') {\n      // @ts-ignore\n      nextInput[key] = omitDeep(value, excludes);\n      return nextInput;\n    }\n    // @ts-ignore\n    nextInput[key] = value;\n\n    return nextInput;\n  }, {} as T);\n}\n\n/**\n * Recursively modifies keys from an object\n * based os a regex pattern\n * @example\n *\n * const input = {\n *   id: 1,\n *   'name.name': '123',\n *   createdAt: '1020209',\n *   address: {\n *     'name.name': '123',\n *   },\n *   variants: [\n *     {\n *       id: 22,\n *       'name.name': '123',\n *       variantOption: {\n *         id: 1,\n *         'name.name': '123',\n *       },\n *     },\n *     {\n *       id: 32,\n *       name.name: '123',\n *     },\n *   ],\n * }\n *\n * modKeyDeep(input, /\\./, '-')\n *\n * const input = {\n *   id: 1,\n *   'name-name': '123',\n *   createdAt: '1020209',\n *   address: {\n *     'name-name': '123',\n *   },\n *   variants: [\n *     {\n *       id: 22,\n *       'name-name': '123',\n *       variantOption: {\n *         id: 1,\n *         'name-name': '123',\n *       },\n *     },\n *     {\n *       id: 32,\n *       name-name: '123',\n *     },\n *   ],\n * }\n *\n * @param input\n * @param pattern\n * @param replacement defaults to ''\n * @return {object}\n */\nexport function modKeyDeep<T extends Record<string, unknown>>(input: T, pattern: RegExp, replacement = ''): T {\n  return Object.entries(input).reduce((nextInput, [key, value]) => {\n    if (Array.isArray(value)) {\n      const arrValue = value;\n      const nextValue = arrValue.map((arrItem) => {\n        if (typeof arrItem === 'object') {\n          return modKeyDeep(arrItem, pattern, replacement);\n        }\n        return arrItem;\n      });\n      // @ts-ignore\n      nextInput[key.replace(pattern, replacement)] = nextValue;\n      return nextInput;\n    }\n    if (typeof value === 'object') {\n      // @ts-ignore\n      nextInput[key.replace(pattern, replacement)] = modKeyDeep(value, pattern, replacement);\n      return nextInput;\n    }\n    // @ts-ignore\n    nextInput[key.replace(pattern, replacement)] = value;\n\n    return nextInput;\n  }, {} as T);\n}\n\n/**\n * Recursively filters keys from an object\n * based on a regex pattern\n * @example\n *\n * const input = {\n *   id: 1,\n *   'name.name': '123',\n *   createdAt: '1020209',\n *   address: {\n *     'name.name': '123',\n *   },\n *   variants: [\n *     {\n *       id: 22,\n *       'name.name': '123',\n *       variantOption: {\n *         id: 1,\n *         'name.name': '123',\n *       },\n *     },\n *     {\n *       id: 32,\n *       'name.name': '123',\n *     },\n *   ],\n * }\n *\n * matchKeyDeep(input, /\\./)\n *\n * const input = {\n *   'name.name': '123',\n *   address: {\n *     'name.name': '123',\n *   },\n *   variants: [\n *     {\n *       'name.name': '123',\n *       variantOption: {\n *         'name.name': '123',\n *       },\n *     },\n *     {\n *       name.name: '123',\n *     },\n *   ],\n * }\n *\n * @param input\n * @param pattern\n * @return {object}\n */\nexport function matchKeyDeep<T extends Record<string, unknown>>(input: T, pattern: RegExp): Partial<T> {\n  return Object.entries(input).reduce((nextInput, [key, value]) => {\n    const isMatch = pattern.test(key);\n    if (Array.isArray(value)) {\n      const arrValue = value;\n      let nextValue = arrValue.map((arrItem) => {\n        if (typeof arrItem === 'object') {\n          return matchKeyDeep(arrItem, pattern);\n        }\n        return arrItem;\n      });\n      if (!isMatch && Array.isArray(nextValue)) {\n        nextValue = nextValue.filter((v) => (typeof v === 'object' && v !== null));\n        if (nextValue.length === 0) return nextInput;\n      }\n      // @ts-ignore\n      nextInput[key] = nextValue;\n      return nextInput;\n    }\n    if (typeof value === 'object' && value !== null) {\n      const recurse = matchKeyDeep(value as T, pattern);\n      if (!isMatch && Object.keys(recurse).length === 0) {\n        return nextInput;\n      }\n      // @ts-ignore\n      nextInput[key] = recurse;\n      return nextInput;\n    }\n\n    if (isMatch) {\n      // @ts-ignore\n      nextInput[key] = value;\n    }\n\n    return nextInput;\n  }, {} as T);\n}\n\n/**\n * Performs a '.map' of the function 'matchKeysDeep'\n * and returns an array of key matches\n * @param input\n * @param pattern\n * @returns\n */\nexport function matchKeyDeepInArray<T extends Record<string, unknown>>(input: T[], pattern: RegExp): Partial<T>[] {\n  return input.map((item) => matchKeyDeep(item, pattern));\n}\n\n/**\n * Filters first level keys of an object\n * based on a regex pattern\n * @example\n *\n * const input = {\n *   id: 1,\n *   'name.name': '123',\n *   createdAt: '1020209',\n *   address: {\n *     'name.name': '123',\n *   },\n * };\n *\n * matchKeyShallow(input, /\\./, '-')\n *\n * const input = {\n *   'name.name': '123',\n * };\n *\n * @param input\n * @param pattern\n * @return {object}\n */\nexport function matchKeyShallow<T extends Record<string, unknown>>(input: T, pattern: RegExp): T {\n  return Object.entries(input).reduce((obj, [key, value]) => {\n    const isMatch = pattern.test(key);\n    if (isMatch) {\n      return { ...obj, [key]: value };\n    }\n    return obj;\n  }, {} as T);\n}\n\n/**\n * Gets the value of a given nested key. (first match)\n * @param object\n * @param key\n * @returns\n */\nexport function getValueByKey(object: Record<string, any>, key: string): any | null {\n  if (Object.keys(object).includes(key)) return object[key];\n  for (let i = 0; i < Object.keys(object).length; i += 1) {\n    if (typeof object[Object.keys(object)[i]] === 'object' && object[Object.keys(object)[i]] !== null) {\n      const o = getValueByKey(object[Object.keys(object)[i]], key);\n      if (o != null) return o;\n    }\n  }\n  return null;\n}\n\n/**\n * Gets the key of an object for a given value. (NO NESTED!!)\n *\n *\n * IMPORTANT!!!\n * It returns the first match, so make sure you call this function\n * only on objects that have unique values.\n * @param object\n * @param value\n * @returns\n */\nexport function getKeyByValue<V, T extends Record<string | number, V>, K extends keyof T>(object: T, value: V): ToString<K> | undefined {\n  return Object.keys(object).find((key) => object[key] === value) as ToString<K> | undefined;\n}\n\n/**\n * Removes duplicates of an array of objects\n * @param objArr\n */\nexport function rmvObjDuplicates<T>(objArr: T[]): T[] {\n  return lodash.uniqWith(objArr, lodash.isEqual);\n}\n\n/**\n * Removes duplicates of an array of objects by a given UNIQUE key\n * @param objArr\n */\nexport function rmvObjDuplicatesByKey<T extends Record<string, any>[]>(objArr: T, key: string): T {\n  return lodash.uniqBy(objArr, key) as unknown as T;\n}\n\n/**\n * Returns an array of all object paths\n * @param obj\n * @returns\n *\n * NOTE: Returns arrays in bracket notation\n */\nexport function getObjPaths<T extends Record<string, any>>(obj: T): string[] {\n  const recurse = (innerObj: T, prefix: string, acc: string[]) => {\n    if (prefix !== '') acc.push(prefix);\n    if (typeof innerObj === 'object' && innerObj !== null) {\n      if (Array.isArray(innerObj)) {\n        for (let k = 0; k < innerObj.length; k += 1) {\n          recurse(innerObj[k], `${prefix}[${k}]`, acc);\n        }\n      } else {\n        const keys = Object.keys(innerObj);\n        keys.forEach((k) => {\n          recurse(innerObj[k], `${prefix}.${k}`, acc);\n        });\n      }\n    }\n    return acc;\n  };\n  return recurse(obj, '', []);\n}\n\nexport const safeStringify = (obj:Record<string, unknown>, indent = 2): string => {\n  let cache: any[] | null = [];\n  const retVal = JSON.stringify(\n    obj,\n    (key, value) => (typeof value === 'object' && value !== null\n      ? cache?.includes(value)\n        ? undefined // Duplicate reference found, discard key\n        : cache?.push(value) && value // Store value in our collection\n      : value),\n    indent,\n  );\n  cache = null;\n  return retVal;\n};\n\n/**\n * Filters undefined properties.\n *\n * IMPORTANT!\n *\n * Mutates the original object if inPlace left as true\n * @param obj\n * @returns\n */\nexport function filterObjUndefined <T extends Record<string, unknown>>(obj: T, inplace?: true): void\nexport function filterObjUndefined <T extends Record<string, unknown>>(obj: T, inplace?: false): T\nexport function filterObjUndefined <T extends Record<string, unknown>>(obj: T[], inplace?: true): void\nexport function filterObjUndefined <T extends Record<string, unknown>>(obj: T[], inplace?: false): T[]\n// eslint-disable-next-line\nexport function filterObjUndefined <T extends Record<string, unknown>>(obj: T | T[], inplace = true): void | T | T[] {\n  const object = inplace ? obj : cloneDeep(obj);\n  const recurse = (innerObj: Record<string, unknown> | unknown[] | unknown) => {\n    if (typeof innerObj === 'object' && innerObj !== null) {\n      if (Array.isArray(innerObj)) {\n        for (let k = 0; k < innerObj.length; k += 1) {\n          if (typeof innerObj[k] === 'undefined') delete innerObj[k];\n          else recurse(innerObj[k]);\n        }\n      } else {\n        const keys = Object.keys(innerObj);\n        keys.forEach((k) => {\n          // @ts-ignore\n          if (typeof innerObj === 'object' && typeof innerObj[k] === 'undefined') delete innerObj[k];\n          // @ts-ignore\n          else recurse(innerObj[k]);\n        });\n      }\n    }\n  };\n  recurse(object);\n  if (!inplace) return object;\n}\n\n/**\n * Filters an object by another object\n * @param obj\n * @param keyVal\n * @example\n *\n * const obj = {\n *  a: 'blabla',\n *  b: 32,\n *  c: 'Im so sleepy',\n * };\n *\n * const filter = {\n *  a: 'blabla',\n *  b: 32,\n * }\n *\n * filterObjectByKeyValue(obj, filter) => {c: 'Im so sleepy'}\n *\n *\n */\nexport const filterObjectByKeyValue = <T extends Record<string, string | number>>(obj: T, keyValObj: T): T => {\n  const newObj: Record<string, string | number> = cloneDeep(obj);\n  const objKeys = Object.keys(obj);\n  const filterKeys = Object.keys(keyValObj);\n  const lng = objKeys.length;\n\n  for (let i = 0; i < lng; i += 1) {\n    const key = objKeys[i];\n    if (\n      filterKeys.includes(key)\n      && newObj[key] === keyValObj[key]\n    ) delete newObj[key];\n  }\n\n  return newObj as T;\n};\n\nexport function filterObjectKeys<\n T extends Record<string, unknown>,\n K extends keyof T\n >(\n   obj: T,\n   match: K[] | ReadonlyArray<K>,\n   inplace?: boolean,\n): Omit<T, K>\nexport function filterObjectKeys<\nT extends Record<string, unknown>,\nK extends keyof T\n>(\n  obj: T,\n  match: (k: K) => boolean,\n  inplace?: boolean,\n): Partial<T>\n/**\n * Removes an array of keys from an object.\n *\n * IMPORTANT: Will remove the keys passed if the filter function returns false.\n * Or will remove the keys passed in an array\n * @param obj\n * @param keysTofilter\n * @param inplace\n * @returns\n */\nexport function filterObjectKeys<\nT extends Record<string, unknown>,\nK extends keyof T\n>(\n  obj: T,\n  match: ((k: K) => boolean) | K[] | ReadonlyArray<K>,\n  inplace = false,\n): Omit<T, K> | Partial<T> {\n  const copy = inplace ? obj : cloneDeep(obj);\n  if (typeof match === 'function') {\n    const keys = Object.keys(obj);\n    for (const key of keys) {\n      if (!match(key as K)) {\n        delete copy[key];\n      }\n    }\n  } else {\n    for (const key of match) {\n      delete copy[key];\n    }\n  }\n  return inplace ? obj : copy;\n}\n\nexport const modObjPropsShallow = <T extends Record<string, unknown>>(\n  obj: T,\n  keysToMod: (keyof T)[] | 'all',\n  val: | string | number | Date | boolean | undefined | null,\n  inplace = false,\n): T => {\n  const copy = inplace ? obj : cloneDeep(obj);\n  if (keysToMod === 'all') {\n    return Object.entries(copy).reduce((ob, [key]) => ({\n      ...ob,\n      [key]: val,\n    }), {} as T);\n  }\n  return Object.entries(copy).reduce((ob, [key, value]) => {\n    if (keysToMod.includes(key)) {\n      return {\n        ...ob,\n        [key]: val,\n      };\n    }\n    return {\n      ...ob,\n      [key]: value,\n    };\n  }, {} as T);\n};\n\n/**\n * Performs a groupBy operation in an array of objects.\n * @param objArr\n * @param key\n * @example\n *\n * const data = [\n *  { name: 'corn cob', value: 17, group: 'item' },\n *  { name: 'Dirty toilet', value: 6, group: 'item' },\n *  { name: 'snake', value: 2, group: 'animal' },\n *  { name: 'tesla', value: 17, group: 'car' },\n *  { name: 'gurgel', value: 23, group: 'car' },\n * ];\n *\n * groupBy(data, 'group')\n *\n * {\n *   item: [\n *     { name: 'dildo', value: 17, group: 'item' },\n *     { name: 'Dirty toilet', value: 6, group: 'item' }\n *   ],\n *   animal: [ { name: 'snake', value: 2, group: 'animal' } ],\n *   car: [\n *     { name: 'tesla', value: 17, group: 'car' },\n *     { name: 'gurgel', value: 23, group: 'car' }\n *   ]\n * }\n */\nexport function groupBy<T extends Record<PropertyKey, unknown>, K extends keyof T>(\n  objArr: readonly T[],\n  property: K | ((d: T) => string | undefined),\n): Record<string, T[]> {\n  const propGetter = (x: T) => {\n    if (typeof property === 'function') {\n      return property(x);\n    }\n    if (x[property]) return String(x[property]);\n  };\n\n  return objArr.reduce((memo, x) => {\n    const prop = propGetter(x);\n    if (!isNullOrUndefined(prop)) {\n      if (!memo[prop]) {\n        memo[prop] = [];\n      }\n      memo[prop].push(x);\n    }\n    return memo;\n  }, {} as Record<string, T[]>);\n}\n\ntype GroupByMulti<T, K extends readonly any[]> =\n    K extends readonly [any, ...infer KR] ?\n    Record<string, GroupByMulti<T, KR>> : T[];\n\nexport const groupByMulti = <\n    T extends Record<K[number], {}>,\n    K extends readonly (keyof T)[]\n>(\n    arr: readonly T[],\n    keys: readonly [...K],\n    propIndex = 0,\n  ) => {\n  const grouppedObj: any = groupBy(arr, keys[propIndex]);\n  Object.keys(grouppedObj).forEach((key) => {\n    if (propIndex < keys.length - 1) {\n      grouppedObj[key] = groupByMulti<any, any[]>(grouppedObj[key], keys, propIndex + 1);\n    }\n  });\n  return grouppedObj as GroupByMulti<T, K>;\n};\n\n/**\n * Performs a merge operation by keys in an array of objects.\n *\n * Useful when used in conjunction with {@link groupByMulti}\n * @param objArr\n * @param rmvDuplicates\n * @example\n *\n * const data = [\n *  { name: 'dildo', value: 17, group: 'item' },\n *  { name: 'Dirty toilet', value: 6, group: 'item' },\n *  { name: 'snake', value: 2, group: 'animal' },\n *  { name: 'tesla', value: 17, group: 'car' },\n *  { name: 'gurgel', value: 23, group: 'car' },\n * ];\n *\n * mergeObjArr(data)\n *\n * {\n *   \"name\": [\n *     \"dildo\",\n *     \"Dirty toilet\",\n *     \"snake\",\n *     \"tesla\",\n *     \"gurgel\"\n *   ],\n *   \"value\": [\n *     17,\n *     6,\n *     11,\n *     23\n *   ],\n *   \"group\": [\n *     \"item\",\n *     \"animal\",\n *     \"car\"\n *   ]\n * }\n */\nexport const mergeObjArr = <T extends Record<string, unknown>>(\n  objs: T[],\n  rmvDuplicates = true,\n): {\n  [K in keyof T]: T[K][]\n} => {\n  const arrayKeys: string[] = [];\n\n  const addArrayKey = (key: string) => {\n    if (!arrayKeys.includes(key)) {\n      arrayKeys.push(key);\n    }\n  };\n\n  const unflattenedMerge = [{} as T, ...objs]\n    .map((elm, i, arr) => {\n      if (i) {\n        return Object.entries(elm)\n          .forEach((f) => {\n            const key = f[0];\n            if (arr[0][key] && Array.isArray(arr[0][f[0]])) {\n              if (rmvDuplicates) {\n                (arr[0] as Record<string, unknown[]>)[key] = Array.from(rmvObjDuplicates([...(arr[0][f[0]] as unknown[]), ...[f[1]].flat()]));\n              } else {\n                (arr[0] as Record<string, unknown[]>)[key].push(...([f[1]].flat()));\n              }\n\n              // @ts-ignore\n              if (arr[0][key].length > 1) {\n                addArrayKey(key);\n              }\n            } else {\n              (arr[0] as Record<string, unknown[]>)[key] = [f[1]].flat();\n            }\n\n            if (\n              Array.isArray(elm[key])\n            ) {\n              addArrayKey(key);\n            }\n          });\n      }\n      return elm;\n    })[0] as T;\n\n  const entries = Object.entries(unflattenedMerge)\n    .map(([key, value]) => {\n      if (arrayKeys.includes(key)) {\n        return [key, value];\n      }\n      // @ts-ignore\n      return [key, value[0]];\n    });\n\n  return Object.fromEntries(entries);\n};\n\ntype GroupByAndMerge<T extends Record<string, unknown>, U extends keyof T> = {\n  [K in keyof T]: K extends U ? T[K] : Exclude<T[K], undefined> extends Array<any> ? T[K]: Exclude<T[K], undefined>[] | T[K];\n}[];\n\n/**\n * Performs a groupBy and merge operation by keys in an array of objects.\n *\n * It is a combination of {@link groupByMulti} and {@link mergeObjArr}\n *\n *\n * @param data\n * @param property The property getter\n * @param rmvDuplicates\n * @example\n *\n * const data = [\n *   {\n *     id: '60591791d4d41d0a6817d22b',\n *     value: 'Cor',\n *     subItem: [\n *       {\n *          id: '610d9f71285a7f6c888a4e5a',\n *          value: 'Foda',\n *       },\n *     ],\n *   },\n *   {\n *      id: '611552f970499165d80ff7ec',\n *      value: undefined,\n *   },\n *   {\n *     id: '60591791d4d41d0a6817d236',\n *     value: 'Tamanho',\n *     subItem: [\n *       {\n *          id: '610af5a5588d1e05f829bff1',\n *          value: '34',\n *       },\n *     ],\n *   },\n *   {\n *     id: '60591791d4d41d0a6817d22b',\n *     value: 'Cor',\n *     subItem: [\n *       {\n *          id: '61156cfd70499165d80ffc50',\n *          value: 'ddd',\n *       },\n *     ],\n *   },\n * ];\n *\n * groupByAndMerge(data, 'id')\n *\n * [\n *   {\n *     id: \"60591791d4d41d0a6817d22b\",\n *     value: \"Cor\",\n *     subItem: [\n *       {\n *         id: \"610d9f71285a7f6c888a4e5a\",\n *         value: \"Foda\"\n *       },\n *       {\n *         id: \"61156cfd70499165d80ffc50\",\n *         value: \"ddd\"\n *       }\n *     ]\n *   },\n *   {\n *     id: \"611552f970499165d80ff7ec\"\n *   },\n *   {\n *     id: \"60591791d4d41d0a6817d236\",\n *     value: \"Tamanho\",\n *     subItem: {\n *       id: \"610af5a5588d1e05f829bff1\",\n *       value: \"34\"\n *     }\n *   }\n * ]\n *\n *\n */\nexport const groupByAndMerge = <T extends Record<string, unknown>, U extends keyof T>(\n  data: T[],\n  property: U,\n  rmvDuplicates = true,\n): GroupByAndMerge<T, U> => Object\n  .values(\n    groupBy(\n      data,\n      property,\n    ),\n  ).map((v) => mergeObjArr(v as Record<string, unknown>[], rmvDuplicates)) as GroupByAndMerge<T, U>;\n\n/**\n * Parses a JSON if it is a string, otherwise returns the same value.\n */\nexport const safeJsonParse = <T>(obj: T): ParsedJSON<T> => (typeof obj === 'string' ? JSON.parse(obj) : obj);\n\n/**\n * Checks is a variable is an object\n * @param a\n * @returns\n */\nexport function isLiteralObject(value: unknown): boolean {\n  return value !== null && value !== undefined && Object.is((value as any).constructor, Object);\n}\n\n/**\n * Filters all undefined properties of an object.\n *\n * IMPORTANT:\n * Mutates the original object\n * @param obj\n */\nexport function filterUndefinedObjProperties(obj : Record<any, unknown>): void {\n  const recurse = (o: Record<any, unknown>) => {\n    Object.keys(o).forEach((key) => {\n      const val = o[key];\n      if (typeof val === 'object' && val !== null) {\n        recurse(val as Record<string, unknown>);\n      } else if (val === undefined) {\n        delete o[key];\n      }\n    });\n  };\n  recurse(obj);\n}\n\ntype ReindexableObject<K extends string | number | symbol> = Record<string, unknown> & {\n  [k in K]: string | number | null | undefined\n};\n\n/**\n * Reindexes an object by the value of a given key.\n *\n * IMPORTANT!!\n *\n * If value is undefined or null, it will be removed from the object.\n *\n * @example\n * reindexObjectArrayByValue([\n *   {\n *   _id: 109,\n *   docClass: 'CIA_ABERTA',\n *   docType: 'cad',\n *   fileName: 'cad_cia_aberta.csv',\n *   size: '1.3M',\n *   lastModified: '2022-04-02 06:30',\n *   isSaved: false,\n * },\n * {\n *   _id: 110,\n *   docClass: 'FI',\n *   docType: 'cad',\n *   fileName: 'cad_fi.csv',\n *   size: '28M',\n *   lastModified: '2022-04-02 06:34',\n *   isSaved: false,\n * },\n * ], 'docClass')\n *\n * {\n *   CIA_ABERTA: [\n *     {\n *       _id: 109,\n *       docClass: 'CIA_ABERTA',\n *       docType: 'cad',\n *       fileName: 'cad_cia_aberta.csv',\n *       size: '1.3M',\n *       lastModified: '2022-04-02 06:30',\n *       isSaved: false,\n *     },\n *   ],\n *   FI: [\n *     {\n *       _id: 110,\n *       docClass: 'FI',\n *       docType: 'cad',\n *       fileName: 'cad_fi.csv',\n *       size: '28M',\n *       lastModified: '2022-04-02 06:34',\n *       isSaved: false,\n *     },\n *   ],\n * };\n */\nexport function reindexObjectArrayByValue<T extends ReindexableObject<K>, K extends keyof T>(obj: T[], key: K): {[key in Exclude<T[K], null | undefined>]: T[]} {\n  return obj.reduce((o, v) => {\n    const val = v[key];\n    if (typeof val === 'string' || typeof val === 'number') {\n      return {\n        ...o,\n        [val]: [\n          ...(o[val as keyof typeof o] || []),\n          v,\n        ],\n      };\n    }\n    if (val === null || typeof val === 'undefined') return o;\n    throw new Error('Value must be a string or number');\n  }, {} as {[key in Exclude<T[K], null | undefined>]: T[]});\n}\n\n/**\n * Picks properties from an object\n * @param obj\n * @param keys\n * @returns\n */\nexport function pick<O extends object, K extends keyof O>(obj: O, ...keys: K[]): {[key in K]: O[key]} {\n  return Object.fromEntries(\n    keys\n      .filter((key) => key in obj)\n      .map((key) => [key, obj[key]]),\n  ) as {[key in K]: O[key]};\n}\n\n/**\n * Omits keys from an object\n * @param obj\n * @param keys\n * @returns\n */\nexport function omit<O extends object, K extends keyof O>(obj: O, ...keys: K[]): {[key in Exclude<keyof O, K>]: O[key]} {\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key]) => !keys.includes(key as K)),\n  ) as {[key in Exclude<keyof O, K>]: O[key]};\n}\n\n/**\n *  Spreads an object by key and value\n *\n * @example\n *\n * spread([\n *   {\n *     companyCode: '1023',\n *     code: '1.01.04',\n *     desc: 'Relações Interfinanceiras',\n *     value: 1000,\n *     year: 2013,\n *     group: 'A',\n *     type: 'CON',\n *   },\n *   {\n *     companyCode: '1023',\n *     code: '1.01.04',\n *     desc: 'Relações Interfinanceiras',\n *     value: 50000,\n *     year: 2014,\n *     group: 'A',\n *     type: 'CON',\n *   }, {\n *     companyCode: '1023',\n *     code: '1.01.04',\n *     desc: 'Intangível',\n *     value: 63224237000,\n *     year: 2015,\n *     group: 'A',\n *     type: 'CON',\n *   },\n * ], 'year', 'value')\n *\n * //will result\n * {\n *   '2013': 1000,\n *   '2014': 50000,\n *   '2015': 63224237000,\n *   companyCode: '1023',\n *   code: '1.01.04',\n *   desc: 'Relações Interfinanceiras',\n *   group: 'A',\n *   type: 'CON'\n * }\n*/\nexport function spread<T extends Record<string, unknown>, SB extends keyof T, SO extends keyof T>(\n  a: T[],\n  spreadBy: SB,\n  spreadOn: SO,\n  fillObj?: object,\n): {\n  [K in Exclude<keyof T, SB | SO>]: T[K]\n} & {\n  [K: string]: T[SO]\n} {\n  return a.reduce((spr, val) => {\n    if (!isNullOrUndefined(val[spreadBy]) && (val[spreadBy] as any).toString) {\n      const key = (val[spreadBy] as any).toString();\n      const as = {\n        ...(fillObj || {}),\n        ...omit(val, spreadOn, spreadBy as keyof T),\n        ...spr,\n        [key]: val[spreadOn],\n      };\n      return as;\n    }\n    return spr;\n  }, {} as {\n    [K in Exclude<keyof T, SB | SO>]: T[K]\n  } & {\n    [K: string]: T[SO]\n  });\n}\n\n/**\n * Returns a random value from an enum\n */\nexport function randomEnumVal<T extends string, TEnumValue extends string | number>(e: { [key in T]: TEnumValue }): TEnumValue {\n  const enumerator = Object.fromEntries(Object.entries(e).filter(([k]) => Number.isNaN(Number(k))));\n  const vals = Object.values(enumerator) as TEnumValue[];\n  return vals[Math.floor(Math.random() * vals.length)];\n}\n\n/**\n * Returns an array of enum Keys\n */\nexport function enumKeys<T extends string, TEnumValue extends string | number>(e: { [key in T]: TEnumValue }): string[] {\n  const enumerator = Object.fromEntries(Object.entries(e).filter(([k]) => Number.isNaN(Number(k))));\n  const keys = Object.keys(enumerator);\n  return keys;\n}\n\n/**\n * Returns an array of enum values\n */\nexport function enumValues<T extends string, TEnumValue extends string | number>(e: { [key in T]: TEnumValue }): TEnumValue[] {\n  const enumerator = Object.fromEntries(Object.entries(e).filter(([k]) => Number.isNaN(Number(k))));\n  const vals = Object.values(enumerator) as TEnumValue[];\n  return vals;\n}\n\n/**\n * Returns the entries of an enum\n */\nexport function enumEntries<T extends string, TEnumValue extends string | number>(e: { [key in T]: TEnumValue }): Entries<{ [key in T]: TEnumValue }> {\n  const enumerator = Object.fromEntries(Object.entries(e).filter(([k]) => Number.isNaN(Number(k))));\n  const vals = Object.entries(enumerator) as Entries<{ [key in T]: TEnumValue }>;\n  return vals;\n}\n\n/**\n * Gets a random key from an object\n * @param obj\n */\nexport function getRandomObjKey<O extends object>(obj: O): keyof O {\n  const keys = Object.keys(obj) as (keyof O)[];\n  return keys[Math.floor(Math.random() * keys.length)];\n}\n\n/**\n * Gets a random value from an object\n * @param obj\n */\nexport function getRandomObjValue<O extends object>(obj: O): O[keyof O] {\n  const values = Object.values(obj) as (O[keyof O])[];\n  return values[Math.floor(Math.random() * values.length)];\n}\n\n/**\n * Gets a random entry from an object\n * @param obj\n */\nexport function getRandomObjEntry<O extends object>(obj: O): [keyof O, O[keyof O]] {\n  const entries = Object.entries(obj) as ([keyof O, O[keyof O]])[];\n  return entries[Math.floor(Math.random() * entries.length)];\n}\n\ntype UnknownObjectLiteral = {\n  [key: string]: unknown\n}\n\n/**\n * Check if a value is an Object literal\n * @param value\n * @returns\n */\nexport const isObjectLiteral = (value: unknown): value is UnknownObjectLiteral => {\n  if (typeof value !== 'object') return false;\n  return value !== null\n    && value !== undefined\n    && Object.is(value.constructor, Object);\n};\n\ntype TObjKey<O extends object, K extends keyof O> =\nKeyExists<O, K> extends true\n? O[K]\n: unknown;\n\ntype TObj<O, K extends keyof O> =\nO extends object\n? {[key in K]: TObjKey<O, key>}\n: {[key in K]: unknown} & {[key: string]: unknown}\n\n/**\n * Checks if an object has properties\n * @param potentialObj\n * @returns\n */\nexport function objHasProp<O, K extends string>(\n  potentialObj: O,\n  keys: K[],\n  // @ts-ignore\n): potentialObj is (TObj<O, K>) {\n  if (\n    typeof potentialObj !== 'object'\n     || potentialObj === null\n     || potentialObj instanceof Date\n     || potentialObj instanceof Array\n  ) return false;\n\n  if (keys.every((key) => key in potentialObj)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Filters an object if the values of the second object are equal.\n *\n * Returns the values of the first object\n * @param obj1\n * @param obj2\n * @returns\n */\nexport const diffObject = <T extends Record<PropertyKey, unknown>>(\n  obj1: T,\n  obj2: T,\n) => {\n  const allKeys = Array.from(new Set([\n    ...Object.keys(obj1),\n    ...Object.keys(obj2),\n  ]));\n  return allKeys\n    .reduce((dObj, k) => {\n      if (isEqual(obj1[k], obj2[k])) {\n        return dObj;\n      }\n\n      return {\n        ...dObj,\n        [k]: obj1[k],\n      };\n    }, {} as Partial<T>);\n};\n\nexport function objFromKeys<T extends string, V extends (k: T) => any, R = ReturnType<V>>(keys: T[], val: V): {[K in T]: R}\nexport function objFromKeys<T extends string, V>(keys: T[], val: V): {[K in T]: V}\n/**\n * Builds an object from an array of keys\n * @param keys\n * @param val\n */\nexport function objFromKeys<T extends string, V>(keys: T[], val: V): {[K in T]: V} {\n  const v = typeof val === 'function'\n    ? (k: string) => val(k)\n    : () => val;\n  return keys.reduce((obj, k) => ({\n    ...obj,\n    [k]: v(k),\n  }), {} as {[K in T]: V});\n}\n"]}