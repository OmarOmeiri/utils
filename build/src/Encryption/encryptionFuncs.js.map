{"version":3,"file":"encryptionFuncs.js","sourceRoot":"","sources":["../../../src/Encryption/encryptionFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,yCAAqC;AACrC,mCAAqC;AAErC;;;;;GAKG;AACI,MAAM,OAAO,GAAG,CAAC,KAAc,EAAE,GAAU,EAAU,EAAE;IAC5D,IAAI,YAAY,CAAC;IACjB,QAAQ,OAAO,KAAK,EAAE;QACpB,KAAK,QAAQ;YACX,YAAY,GAAG,KAAK,CAAC;YACrB,MAAM;QACR,KAAK,QAAQ;YACX,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrC,MAAM;QACR,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ,CAAC;QACd,KAAK,SAAS;YACZ,YAAY,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM;QACR,OAAO,CAAC,CAAC;YACP,MAAM,GAAG,GAAG;gBACV,OAAO,EAAE,qDAAqD,OAAO,KAAK,EAAE;aAC7E,CAAC;YACF,MAAM,GAAG,CAAC;SACX;KACF;IAED,OAAO,eAAG,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;AACnD,CAAC,CAAC;AAvBW,QAAA,OAAO,WAuBlB;AAEF;;;;;GAKG;AACI,MAAM,OAAO,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,EAAE;IACpD,MAAM,KAAK,GAAG,eAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACtC,OAAO,KAAK,CAAC,QAAQ,CAAC,eAAG,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC,CAAC;AAHW,QAAA,OAAO,WAGlB;AAEK,MAAM,WAAW,GAAG,CAAC,QAAQ,GAAG,EAAE,EAAE,EAAE,CAAC,IAAA,oBAAW,EAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAA7E,QAAA,WAAW,eAAkE","sourcesContent":["/**\n * Enciption utility functions\n * @module EncryptionUtils\n * @category Encryption\n */\n\nimport { AES, enc } from 'crypto-js';\nimport { randomBytes } from 'crypto';\n\n/**\n * Encrypts a string with a given key (AES)\n * @param value\n * @param key\n * @returns\n */\nexport const encrypt = (value: unknown, key:string): string => {\n  let encryptValue;\n  switch (typeof value) {\n    case 'string':\n      encryptValue = value;\n      break;\n    case 'object':\n      encryptValue = JSON.stringify(value);\n      break;\n    case 'bigint':\n    case 'number':\n    case 'boolean':\n      encryptValue = value.toString();\n      break;\n    default: {\n      const err = {\n        message: `Encryption Error: This value cannot be encrypted. ${typeof value}`,\n      };\n      throw err;\n    }\n  }\n\n  return AES.encrypt(encryptValue, key).toString();\n};\n\n/**\n * Decrypts a string with a given key (AES)\n * @param value\n * @param key\n * @returns\n */\nexport const decrypt = (value: string, key: string) => {\n  const bytes = AES.decrypt(value, key);\n  return bytes.toString(enc.Utf8);\n};\n\nexport const randomToken = (byteSize = 64) => randomBytes(byteSize).toString('base64url');\n"]}