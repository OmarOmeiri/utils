{"version":3,"file":"calculated.js","sourceRoot":"","sources":["../../../src/Fin/calculated.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNullOrUndefined } from '../Misc';\n\ntype NullOrUndefNum = null | undefined | number;\n\nexport type EVParams = {\n  price: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n  totalDebt: NullOrUndefNum,\n  cash: NullOrUndefNum,\n}\n/**\n * Enterprise value\n *\n * EV = (Price * Nº of shares) + (Total Debt - Cash)\n *\n */\nexport const EV = ({\n  price,\n  sharesOutstanding,\n  totalDebt,\n  cash,\n}:EVParams): number | null => {\n  if (\n    !price\n    || (!sharesOutstanding)\n    || isNullOrUndefined(totalDebt)\n    || isNullOrUndefined(cash)\n  ) return null;\n  return (price * sharesOutstanding) + (totalDebt - cash);\n};\n\nexport type TaxRateParams = {\n  earningsBeforeTax: NullOrUndefNum,\n  totalTax: NullOrUndefNum,\n}\n/**\n * The corporate tax rate is also known\n * as the effective tax rate. It is the percentage of a company's income it pays in taxes.\n * @returns\n */\nexport const taxRate = ({\n  earningsBeforeTax,\n  totalTax,\n}: TaxRateParams): number | null => {\n  if (\n    isNullOrUndefined(totalTax)\n    || isNullOrUndefined(earningsBeforeTax)\n  ) return null;\n  return totalTax / earningsBeforeTax;\n};\n\nexport type NOPATParams = {\n  EBIT: NullOrUndefNum\n  taxRate: NullOrUndefNum,\n}\n/**\n * NOPAT is after-tax operating cash generated\n * by a company and available for all investors—both shareholders and debtholders.\n * @returns\n */\nexport const NOPAT = ({\n  EBIT,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  taxRate,\n}: NOPATParams): number | null => {\n  if (isNullOrUndefined(EBIT) || isNullOrUndefined(taxRate)) return null;\n  return EBIT * (1 - taxRate);\n};\n\nexport type InvestedCapitalParams = {\n  totalDebt: NullOrUndefNum,\n  totalEquity: NullOrUndefNum,\n  nonOperatingCashAndInvestments: NullOrUndefNum\n}\n/**\n * Invested capital is the investment made by both shareholders and debtholders in a company\n * @returns\n */\nexport const investedCapital = ({\n  totalDebt,\n  totalEquity,\n  nonOperatingCashAndInvestments,\n}: InvestedCapitalParams): number | null => {\n  if (\n    isNullOrUndefined(totalDebt)\n    || !totalEquity\n    || isNullOrUndefined(nonOperatingCashAndInvestments)\n  ) return null;\n  return totalDebt + totalEquity + nonOperatingCashAndInvestments;\n};\n\nexport type OperatingIncomeParams = {\n  grossIncome: NullOrUndefNum,\n  operatingExpenses: NullOrUndefNum,\n}\n/**\n * Operating income is a measurement that shows\n * how much of a company's revenue will eventually become profits.\n */\nexport const operatingIncome = ({\n  grossIncome,\n  operatingExpenses,\n}: OperatingIncomeParams): number | null => {\n  if (\n    isNullOrUndefined(grossIncome)\n    || isNullOrUndefined(operatingExpenses)\n  ) return null;\n  return grossIncome - operatingExpenses;\n};\n\nexport type GrossMarginParams = {\n  grossIncome: NullOrUndefNum,\n  COGS: NullOrUndefNum,\n}\n\nexport type NetDebtParams = {\n  totalDebt: NullOrUndefNum,\n  cash: NullOrUndefNum\n}\n/**\n * Net debt is a financial liquidity metric that\n * measures a company’s ability to pay all its debts if they were due today.\n */\nexport const netDebt = ({\n  totalDebt,\n  cash,\n}: NetDebtParams): number | null => {\n  if (\n    isNullOrUndefined(totalDebt)\n    || isNullOrUndefined(cash)\n  ) return null;\n  return totalDebt - cash;\n};\n\nexport type EBITParams = {\n  netIncome: NullOrUndefNum,\n  taxes: NullOrUndefNum\n  interest: NullOrUndefNum,\n}\n\nexport const EBIT = ({\n  netIncome,\n  taxes,\n  interest,\n}:EBITParams): number | null => {\n  if (\n    isNullOrUndefined(netIncome)\n    || isNullOrUndefined(taxes)\n    || isNullOrUndefined(interest)\n  ) return null;\n  return netIncome + interest + taxes;\n};\n\nexport const growthStreak = (vals: number[], asc = true): number => {\n  let streak = 0;\n  let last = vals[0];\n  for (const val of vals) {\n    if (asc && val > last) streak += 1;\n    else if (!asc && val < last) streak += 1;\n    else streak = 0;\n    last = val;\n  }\n  return streak;\n};\n"]}