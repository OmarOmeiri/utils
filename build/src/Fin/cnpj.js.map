{"version":3,"file":"cnpj.js","sourceRoot":"","sources":["../../../src/Fin/cnpj.ts"],"names":[],"mappings":"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","sourcesContent":["import { getRandomInt } from '../Math';\n\n/**\n * Formats a CNPJ\n * @param cnpj\n */\nexport function formatCNPJ(cnpj: string): string {\n  const onlyDigCnpj = cnpj.replace(/[^\\d]/g, '');\n  if (onlyDigCnpj.length !== 14) throw new Error('Invalid CNPJ');\n  return (\n    `${onlyDigCnpj.slice(0, 2)\n    }.${\n      onlyDigCnpj.slice(2, 5)\n    }.${onlyDigCnpj.slice(5, 8)\n    }/${\n      onlyDigCnpj.slice(8, 12)\n    }-${\n      onlyDigCnpj.slice(12, 14)}`\n  );\n}\n\n/**\n * Validates a CNPJ\n * @param cnpj\n * @returns\n */\nexport function validateCNPj(cnpj: string): boolean {\n  if (!cnpj) return false;\n\n  // eslint-disable-next-line no-param-reassign\n  cnpj = cnpj.replace(/[^\\d]+/g, '');\n\n  if (cnpj.replace(/(.)\\1+/g, '$1').length <= 1) return false;\n\n  let tamanho = cnpj.length - 2;\n  let numeros = cnpj.substring(0, tamanho);\n  const digitos = cnpj.substring(tamanho);\n  let soma = 0;\n  let pos = tamanho - 7;\n\n  for (let i = tamanho; i >= 1; i -= 1) {\n    // eslint-disable-next-line no-plusplus\n    soma += Number(numeros.charAt(tamanho - i)) * pos--;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  let resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\n  if (resultado !== Number(digitos.charAt(0))) return false;\n\n  tamanho += 1;\n  numeros = cnpj.substring(0, tamanho);\n  soma = 0;\n  pos = tamanho - 7;\n  for (let k = tamanho; k >= 1; k -= 1) {\n    // eslint-disable-next-line no-plusplus\n    soma += Number(numeros.charAt(tamanho - k)) * pos--;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\n  if (resultado !== Number(digitos.charAt(1))) return false;\n\n  return true;\n}\n\nconst mod = (numerator: number, denominator: number) => Math.round(numerator - (Math.floor(numerator / denominator) * denominator));\n\n/**\n * Generates a random CNPJ\n * @returns\n */\nexport function randomCNPJ(format = true): string {\n  const maxDigit = 8;\n  const n = 9;\n  const [n1, n2, n3, n4, n5, n6, n7, n8] = Array(n)\n    .fill(null)\n    .map(() => getRandomInt(0, maxDigit));\n  const n9 = 0;\n  const n10 = 0;\n  const n11 = 0;\n  const n12 = 1;\n\n  let d1 = n12 * 2 + n11 * 3 + n10 * 4 + n9 * 5 + n8 * 6 + n7 * 7 + n6 * 8 + n5 * 9 + n4 * 2 + n3 * 3 + n2 * 4 + n1 * 5;\n  d1 = 11 - (mod(d1, 11));\n  if (d1 >= 10) d1 = 0;\n\n  let d2 = d1 * 2 + n12 * 3 + n11 * 4 + n10 * 5 + n9 * 6 + n8 * 7 + n7 * 8 + n6 * 9 + n5 * 2 + n4 * 3 + n3 * 4 + n2 * 5 + n1 * 6;\n  d2 = 11 - (mod(d2, 11));\n  if (d2 >= 10) d2 = 0;\n\n  if (format) return `${n1}${n2}.${n3}${n4}${n5}.${n6}${n7}${n8}/${n9}${n10}${n11}${n12}-${d1}${d2}`;\n  return `${n1}${n2}${n3}${n4}${n5}${n6}${n7}${n8}${n9}${n10}${n11}${n12}${d1}${d2}`;\n}\n"]}