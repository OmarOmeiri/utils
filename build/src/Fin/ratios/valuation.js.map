{"version":3,"file":"valuation.js","sourceRoot":"","sources":["../../../../src/Fin/ratios/valuation.ts"],"names":[],"mappings":"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","sourcesContent":["import { mean } from '../../Math';\nimport { isNullOrUndefined } from '../../Misc';\n\ntype NullOrUndefNum = null | undefined | number;\n\nexport type RatiosPSParams = {\n  price: NullOrUndefNum,\n  salesPerShare: NullOrUndefNum,\n}\n/**\n* Price to Sales Ratio (PS)\n*\n* The price-to-sales (P/S) ratio shows how much investors are willing to pay per dollar of sales for a stock.\n* The P/S ratio is calculated by dividing the stock price by the underlying company's sales per share.\n* A low ratio could imply the stock is undervalued, while a ratio that is higher-than-average could indicate that the stock is overvalued.\n* One of the downsides of the P/S ratio is that it doesn’t take into account whether the company makes any earnings or whether it will ever make earnings.\n*\n* SPS = Sales / Nº of Shares\n*\n* PS = Price / Sales per Share (SPS)\n*/\nexport const RatiosPS = ({\n  price,\n  salesPerShare,\n}:RatiosPSParams): number | null => {\n  if (!price || !salesPerShare) return null;\n  return price / salesPerShare;\n};\n\nexport type RatiosPBParams = {\n  price: NullOrUndefNum,\n  shareholdersEquity: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum\n}\n\n/**\n* Price to Book Ratio (PB) (P/VPA em port)\n*\n* The P/B ratio measures the market's valuation of a company relative to its book value.\n* The market value of equity is typically higher than the book value of a company,\n* P/B ratio is used by value investors to identify potential investments.\n* P/B ratios under 1 are typically considered solid investments.\n*\n* BVPS = (Total Assets - Total Liabilities) /  Nº of Shares\n*\n* PB = Price / Book Value Per Share\n*/export const RatiosPB = ({\n  price,\n  shareholdersEquity,\n  sharesOutstanding,\n}: RatiosPBParams): number | null => {\n  if (\n    !price\n    || !shareholdersEquity\n    || !sharesOutstanding\n  ) return null;\n  return price / (shareholdersEquity / sharesOutstanding);\n};\n\nexport type RatiosPEParams = {\n  price: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n  netIncome: NullOrUndefNum,\n  preferredDividends: NullOrUndefNum\n}\n/**\n * Price to Earnings (PE) (P/L em portugues)\n *\n * The price-to-earnings ratio (P/E ratio) is the ratio for\n * valuing a company that measures its current share price relative to its earnings per share (EPS).\n *\n * P/E ratios are used by investors and analysts to determine the relative value of a company's shares in an apples-to-apples comparison.\n * It can also be used to compare a company against its own historical record or to compare aggregate markets against one another or over time.\n *\n * PE <- Price / Earnings per Share (EPS)\n */\nexport const RatiosPE = ({\n  price,\n  sharesOutstanding,\n  netIncome,\n  preferredDividends,\n}: RatiosPEParams): number | null => {\n  if (\n    isNullOrUndefined(netIncome)\n    || !sharesOutstanding\n    || !price\n  ) return null;\n  const earningsPerShare = (netIncome - (preferredDividends || 0)) / sharesOutstanding;\n  if (earningsPerShare === 0) return null;\n  return price / earningsPerShare;\n};\n\nexport type RatiosDYParams = {\n  price: NullOrUndefNum,\n  annualDividendsPerShare: NullOrUndefNum\n}\n/**\n* Dividend Yield (DY)\n*\n* Dividend Yield = Annual Dividends/ Current Price Per Share\n*/\nexport const RatiosDY = ({\n  price,\n  annualDividendsPerShare,\n}: RatiosDYParams): number | null => {\n  if (!annualDividendsPerShare) return 0;\n  if (!price) return null;\n  return Math.max((annualDividendsPerShare / price) || 0, 0);\n};\n\nexport type RatiosSPSParams = {\n  sales: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n}\n/**\n* Sales per share (SPS)\n*/\nexport const RatiosSPS = ({\n  sales,\n  sharesOutstanding,\n}:RatiosSPSParams): number | null => {\n  if (!sharesOutstanding) return null;\n  if (isNullOrUndefined(sales)) return null;\n  return sales / sharesOutstanding;\n};\n\nexport type RatiosEVSParams = {\n  EV: NullOrUndefNum,\n  sales: NullOrUndefNum,\n}\n/**\n * Enterprise value to Sales (EVS)\n *\n * EV = (Price * Nº of shares) + Total Debt - Cash\n *\n * EVS = EV / Sales\n */\nexport const RatiosEVS = ({\n  EV,\n  sales,\n}:RatiosEVSParams): number | null => {\n  if (!sales || !EV) return null;\n  return EV / sales;\n};\n\nexport type RatiosEVEBITDAParams = {\n  EV: NullOrUndefNum,\n  EBITDA: NullOrUndefNum,\n}\n/**\n * Enterprise value to EBITDA\n *\n * EV = (Price * Nº of shares) + Total Debt - Cash\n *\n * EVTEBITDA = EV / EBITDA\n */\nexport const RatiosEVEBITDA = ({\n  EV,\n  EBITDA,\n}: RatiosEVEBITDAParams): number | null => {\n  if (!EBITDA || !EV) return null;\n  return EV / EBITDA;\n};\n\nexport type RatiosEVEBITParams = {\n  EV: NullOrUndefNum,\n  EBIT: NullOrUndefNum,\n}\n/**\n * Enterprise value to EBIT\n *\n * EV = (Price * Nº of shares) + Total Debt - Cash\n *\n * EVTEBIT = EV / EBIT\n */\nexport const RatiosEVEBIT = ({\n  EV,\n  EBIT,\n}: RatiosEVEBITParams): number | null => {\n  if (!EBIT || !EV) return null;\n  return EV / EBIT;\n};\n\nexport type RatiosNetAssetToAssetParams = {\n  shareholdersEquity: NullOrUndefNum,\n  totalAssets: NullOrUndefNum,\n}\n/**\n * Net Assets to asset ratio (higher is better)\n *\n * NATA <- net_assets / total_assets\n */\nexport const RatiosNetAssetToAsset = ({\n  shareholdersEquity,\n  totalAssets,\n}: RatiosNetAssetToAssetParams): number | null => {\n  if (!shareholdersEquity || !totalAssets) return null;\n  return shareholdersEquity / totalAssets;\n};\n\nexport type RatiosAssetTurnoverParams = {\n  revenue: NullOrUndefNum,\n  beginAssets: NullOrUndefNum,\n  endAssets: NullOrUndefNum\n}\n/**\n * Asset turnover\n *\n * AT <- total_revenue / ((begin_assets + end_assets) / 2)\n */\nexport const RatiosAssetTurnover = ({\n  revenue,\n  beginAssets,\n  endAssets,\n}: RatiosAssetTurnoverParams): number | null => {\n  if (\n    isNullOrUndefined(revenue)\n    || !beginAssets\n    || !endAssets\n  ) return null;\n  return revenue / (mean(beginAssets, endAssets));\n};\n\nexport type RatiosCAGRParams = {\n  beginValue: NullOrUndefNum,\n  endValue: NullOrUndefNum,\n  period: number,\n}\n/**\n * Compound annual growth rate\n */\nexport const RatiosCAGR = ({\n  beginValue,\n  endValue,\n  period,\n}: RatiosCAGRParams): number | null => {\n  if (\n    isNullOrUndefined(endValue)\n    || isNullOrUndefined(beginValue)\n  ) return null;\n  if (beginValue > 0 && endValue > 0) return (endValue / beginValue) ** (1 / period) - 1;\n  if (beginValue < 0 && endValue < 0) return (-1) * ((Math.abs(endValue) / Math.abs(beginValue)) ** (1 / period) - 1);\n  if (beginValue < 0 && endValue > 0) return ((endValue + 2 * Math.abs(beginValue)) / Math.abs(beginValue)) ** (1 / period) - 1;\n  if (beginValue > 0 && endValue < 0) return (-1) * (((Math.abs(endValue) + 2 * beginValue) / beginValue) ** (1 / period) - 1);\n  return null;\n};\n\nexport type RatiosNAVPSParams = {\n  shareholdersEquity: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n}\n/**\n * Net Asset Value Per Share (NAVPS)\n *\n *  net_assets = Total Assets – Total Liabilities\n *\n * Net asset value per share (NAVPS) is an expression for net asset value that\n * represents the value per share of a mutual fund, an exchange-traded fund (ETF), or a closed-end fund.\n *\n * It is calculated by dividing the total net asset value of the fund or company by the\n * number of shares outstanding and is also known as book value per share.\n *\n * NAVPS <- Net Assets / Number of Shares\n */\nexport const RatiosNAVPS = ({\n  shareholdersEquity,\n  sharesOutstanding,\n}: RatiosNAVPSParams): number | null => {\n  if (\n    isNullOrUndefined(shareholdersEquity)\n    || !sharesOutstanding\n  ) return null;\n  return shareholdersEquity / sharesOutstanding;\n};\n\nexport type RatiosEPSParams = {\n  netIncome: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n  preferredDividends: NullOrUndefNum\n}\n/**\n * Earnings per share (EPS) (LPA em port)\n *\n * EPS, which stands for earnings per share, represents a company's annualized net profit\n * divided by the number of common shares of stock it has outstanding.\n *\n * Because it's a measure of profitability on a per-share basis,\n * EPS is commonly used by investors to estimate the value of a company, per share.\n *\n * EPS = (Net Income – Preferred Dividends) / End of period Shares Outstanding\n  */\nexport const RatiosEPS = ({\n  netIncome,\n  sharesOutstanding,\n  preferredDividends,\n}: RatiosEPSParams): number | null => {\n  if (\n    isNullOrUndefined(netIncome)\n    || !sharesOutstanding\n  ) return null;\n  return (netIncome - (preferredDividends || 0)) / sharesOutstanding;\n};\n\nexport type RatiosMarketCapParams = {\n  price: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n}\n\nexport const RatiosMarketCap = ({\n  price,\n  sharesOutstanding,\n}: RatiosMarketCapParams): number | null => {\n  if (!price || !sharesOutstanding) return null;\n  return price * sharesOutstanding;\n};\n\nexport type RatiosChowderPassParams = {\n  DY: NullOrUndefNum,\n  CAGR5D: NullOrUndefNum,\n}\nexport const RatiosChowderPass = ({\n  DY,\n  CAGR5D,\n}: RatiosChowderPassParams): boolean => {\n  if (!DY || !CAGR5D) return false;\n  if (CAGR5D < 0) return false;\n\n  const chowderNumber = DY + CAGR5D;\n  if (DY > 0.03 && chowderNumber > 0.12) return true;\n  if (DY <= 0.03 && chowderNumber > 0.15) return true;\n  return false;\n};\n\nexport type RatiosPayoutParams = {\n  annualDividends: NullOrUndefNum,\n  netIncome: NullOrUndefNum,\n}\n/**\n *  Dividend payout Ratio\n *\n * DP <- annualDividend / netIncome\n * @param param0\n * @returns\n */\nexport const RatiosPayout = ({\n  annualDividends,\n  netIncome,\n}: RatiosPayoutParams): number | null => {\n  if (!annualDividends || annualDividends === 0) return 0;\n  if (!netIncome || netIncome === 0) return null;\n  return annualDividends / netIncome;\n};\n\nexport type RatiosBVPSParams = {\n  shareholdersEquity: NullOrUndefNum,\n  sharesOutstanding: NullOrUndefNum,\n}\n/**\n * Book Value Per Share (BVPS) (VPA em port.)\n *\n * Book value per share (BVPS) is the ratio of equity\n * available to common shareholders divided by the number of outstanding shares.\n * @param param0\n * @returns\n */\nexport const RatiosBVPS = ({\n  shareholdersEquity,\n  sharesOutstanding,\n}: RatiosBVPSParams): number | null => {\n  if (!shareholdersEquity || !sharesOutstanding) return null;\n  return shareholdersEquity / sharesOutstanding;\n};\n"]}