{"version":3,"file":"liquidity.js","sourceRoot":"","sources":["../../../../src/Fin/ratios/liquidity.ts"],"names":[],"mappings":";;;AAAA,qCAA+C;AAQ/C;;;;GAIG;AACI,MAAM,aAAa,GAAG,CAAC,EAC5B,aAAa,EACb,kBAAkB,GACE,EAAiB,EAAE;IACvC,IACE,IAAA,wBAAiB,EAAC,aAAa,CAAC;WAC7B,CAAC,kBAAkB;QACtB,OAAO,IAAI,CAAC;IACd,OAAO,aAAa,GAAG,kBAAkB,CAAC;AAC5C,CAAC,CAAC;AATW,QAAA,aAAa,iBASxB;AAOF;;;;GAIG;AACI,MAAM,WAAW,GAAG,CAAC,EAC1B,aAAa,EACb,kBAAkB,EAClB,SAAS,GACS,EAAiB,EAAE;IACrC,IACE,IAAA,wBAAiB,EAAC,aAAa,CAAC;WAC7B,CAAC,kBAAkB;WACnB,IAAA,wBAAiB,EAAC,SAAS,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,OAAO,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,kBAAkB,CAAC;AAC1D,CAAC,CAAC;AAXW,QAAA,WAAW,eAWtB;AAMF;;;;;;GAMG;AACI,MAAM,UAAU,GAAG,CAAC,EACzB,IAAI,EACJ,kBAAkB,GACD,EAAiB,EAAE;IACpC,IACE,IAAA,wBAAiB,EAAC,IAAI,CAAC;WACpB,CAAC,kBAAkB;QACtB,OAAO,IAAI,CAAC;IAEd,OAAO,IAAI,GAAG,kBAAkB,CAAC;AACnC,CAAC,CAAC;AAVW,QAAA,UAAU,cAUrB;AAOF;;;;GAIG;AACI,MAAM,mBAAmB,GAAG,CAAC,EAClC,GAAG,EACH,GAAG,EACH,GAAG,GACuB,EAAiB,EAAE;IAC7C,IACE,IAAA,wBAAiB,EAAC,GAAG,CAAC;WACnB,IAAA,wBAAiB,EAAC,GAAG,CAAC;WACtB,IAAA,wBAAiB,EAAC,GAAG,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACzB,CAAC,CAAC;AAXW,QAAA,mBAAmB,uBAW9B;AAOF;;;;GAIG;AACI,MAAM,SAAS,GAAG,CAAC,EACxB,WAAW,EACX,OAAO,EACP,MAAM,GAAG,GAAG,GACI,EAAiB,EAAE;IACnC,IACE,CAAC,WAAW;WACT,CAAC,OAAO;WACR,OAAO,GAAG,CAAC;QACd,OAAO,IAAI,CAAC;IACd,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC;AAC1C,CAAC,CAAC;AAXW,QAAA,SAAS,aAWpB;AAOF;;;;GAIG;AACI,MAAM,SAAS,GAAG,CAAC,EACxB,SAAS,EACT,IAAI,EACJ,MAAM,GAAG,GAAG,GACI,EAAiB,EAAE;IACnC,IACE,CAAC,CAAC,SAAS,CAAC;WACT,CAAC,CAAC,IAAI,CAAC;QACV,OAAO,IAAI,CAAC;IACd,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC;AAC/C,CAAC,CAAC;AAVW,QAAA,SAAS,aAUpB;AAOF;;;;GAIG;AACI,MAAM,SAAS,GAAG,CAAC,EACxB,QAAQ,EACR,IAAI,EACJ,MAAM,GAAG,GAAG,GACI,EAAiB,EAAE;IACnC,IACE,IAAA,wBAAiB,EAAC,QAAQ,CAAC;WACxB,CAAC,CAAC,IAAI,CAAC;QACV,OAAO,IAAI,CAAC;IACd,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC,CAAC;AAVW,QAAA,SAAS,aAUpB","sourcesContent":["import { isNullOrUndefined } from '../../Misc';\n\ntype NullOrUndefNum = null | undefined | number;\n\nexport type RatiosCurrentParams = {\n  currentAssets: NullOrUndefNum,\n  currentLiabilities: NullOrUndefNum,\n}\n/**\n * Current Ratio (higher is better) (Líq. Corrente)\n *\n * CR <- current_assets / current_liabilities\n */\nexport const RatiosCurrent = ({\n  currentAssets,\n  currentLiabilities,\n}: RatiosCurrentParams): number | null => {\n  if (\n    isNullOrUndefined(currentAssets)\n    || !currentLiabilities\n  ) return null;\n  return currentAssets / currentLiabilities;\n};\n\nexport type RatiosQuickParams = {\n  currentAssets: NullOrUndefNum,\n  currentLiabilities: NullOrUndefNum,\n  inventory: NullOrUndefNum,\n}\n/**\n * Quick Ratio (higher is better) (Líq. Seca)\n *\n * QR <- (current_assets - inventory) / current_liabilities\n */\nexport const RatiosQuick = ({\n  currentAssets,\n  currentLiabilities,\n  inventory,\n}: RatiosQuickParams): number | null => {\n  if (\n    isNullOrUndefined(currentAssets)\n    || !currentLiabilities\n    || isNullOrUndefined(inventory)\n  ) return null;\n  return (currentAssets - inventory) / currentLiabilities;\n};\n\nexport type RatiosCashParams = {\n  cash: NullOrUndefNum,\n  currentLiabilities: NullOrUndefNum,\n}\n/**\n * (Liq. Imediata)\n * The cash ratio is a measurement of a company's liquidity,\n * specifically the ratio of a company's total cash and cash equivalents to its current liabilities. The metric calculates a company's ability to repay its short-term debt with cash or near-cash resources,\n * such as easily marketable securities.\n *\n */\nexport const RatiosCash = ({\n  cash,\n  currentLiabilities,\n}: RatiosCashParams): number | null => {\n  if (\n    isNullOrUndefined(cash)\n    || !currentLiabilities\n  ) return null;\n\n  return cash / currentLiabilities;\n};\n\nexport type RatiosNetTradeCycleParams = {\n  DSO: NullOrUndefNum,\n  DIO: NullOrUndefNum,\n  DPO: NullOrUndefNum,\n}\n/**\n * Net trade cycle/ Cash Conversion Cycle (lower is better)\n *\n * NTC <- DSO + DIO - DPO\n */\nexport const RatiosNetTradeCycle = ({\n  DSO,\n  DIO,\n  DPO,\n}: RatiosNetTradeCycleParams): number | null => {\n  if (\n    isNullOrUndefined(DSO)\n    || isNullOrUndefined(DIO)\n    || isNullOrUndefined(DPO)\n  ) return null;\n  return DSO + DIO - DPO;\n};\n\nexport type RatiosDSOParams = {\n  receivables: NullOrUndefNum,\n  revenue: NullOrUndefNum,\n  period?: number\n}\n/**\n * receivable days (DSO) (lower is better)\n *\n * DSO <- (receivables / total_revenue) * p\n */\nexport const RatiosDSO = ({\n  receivables,\n  revenue,\n  period = 365,\n}: RatiosDSOParams): number | null => {\n  if (\n    !receivables\n    || !revenue\n    || revenue < 0\n  ) return null;\n  return (receivables / revenue) * period;\n};\n\nexport type RatiosDIOParams = {\n  inventory: NullOrUndefNum,\n  COGS: NullOrUndefNum,\n  period?: number\n}\n/**\n * Inventory days (DIO) (lower is better)\n *\n * DIO <- (inventory / COGS) * p\n */\nexport const RatiosDIO = ({\n  inventory,\n  COGS,\n  period = 365,\n}: RatiosDIOParams): number | null => {\n  if (\n    (!inventory)\n    || (!COGS)\n  ) return null;\n  return (inventory / Math.abs(COGS)) * period;\n};\n\nexport type RatiosDPOParams = {\n  payables: NullOrUndefNum,\n  COGS: NullOrUndefNum,\n  period?: number\n}\n/**\n * Payable days (DPO) (lower is better)\n *\n * DPO <- payables * period / COGS\n */\nexport const RatiosDPO = ({\n  payables,\n  COGS,\n  period = 365,\n}: RatiosDPOParams): number | null => {\n  if (\n    isNullOrUndefined(payables)\n    || (!COGS)\n  ) return null;\n  return (payables * period) / Math.abs(COGS);\n};\n"]}