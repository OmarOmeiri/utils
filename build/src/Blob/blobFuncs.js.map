{"version":3,"file":"blobFuncs.js","sourceRoot":"","sources":["../../../src/Blob/blobFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;AAEH,kDAAkD;AAElD;;;;GAIG;AACI,KAAK,UAAU,WAAW,CAAC,GAAW;IAI3C,IAAI;QACF,MAAM,MAAM,GAAG,EAAE,YAAY,EAAE,MAAM,EAAwB,CAAC;QAC9D,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC,GAAG,CAAO,GAAG,EAAE,MAAM,CAAC,CAAC;QAC/C,OAAO;YACL,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI;YACnB,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI;SACpB,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAdD,kCAcC","sourcesContent":["/**\n * Blob utility functions\n * @module BlobUtils\n * @category Blob\n */\n\nimport axios, { AxiosRequestConfig } from 'axios';\n\n/**\n * Get a blob url size in bytes\n * @param url\n * @returns\n */\nexport async function getBlobSize(url: string): Promise<{\n  size: number,\n  type: string,\n} | undefined> {\n  try {\n    const config = { responseType: 'blob' } as AxiosRequestConfig;\n    const res = await axios.get<Blob>(url, config);\n    return {\n      size: res.data.size,\n      type: res.data.type,\n    };\n  } catch (err) {\n    return undefined;\n  }\n}\n"]}