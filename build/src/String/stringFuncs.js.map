{"version":3,"file":"stringFuncs.js","sourceRoot":"","sources":["../../../src/String/stringFuncs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * String utility functions\n * @module StringUtils\n * @category String\n */\n\n/* eslint-disable no-param-reassign */\nimport { normalizeString } from '../RegEx/regexFuncs';\n\n/**\n * Reverses a string\n * @param str\n * @returns\n */\nexport function reverseString(str: string): string {\n  return str.split('').reverse().join('');\n}\n\n/**\n * Finds the longest/shortest string in an array of strings\n * @param arr\n */\nexport function findLongestOrShortestString(\n  arr: string[],\n  type: 'long' | 'short',\n): string | null {\n  let lgth = type === 'long' ? 0 : Infinity;\n  let result: string | null = null;\n\n  if (type === 'long') {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].length > lgth) {\n        lgth = arr[i].length;\n        result = arr[i];\n      }\n    }\n  } else {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].length < lgth) {\n        lgth = arr[i].length;\n        result = arr[i];\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n *\n * @param str the string to be matched\n * @param reg the RegEx to be used\n * @returns an array of matches\n */\nexport function regexMatches(str: string, reg: RegExp): string[] {\n  const matches = Array.from(str.matchAll(reg)) as unknown as string[];\n  const matchedChars: string[] = [];\n\n  // for (let match of matches) {\n  //   matchedChars.push(match);\n  // }\n  matches.forEach((m) => matchedChars.push(m));\n\n  return matchedChars;\n}\n\n/**\n * Splits a string every n chars\n * @param str\n * @param n\n * @returns\n */\nexport function chunkStr(str: string, size: number): string[] {\n  return Array.from(str.match(new RegExp(`.{1,${size}}`, 'g')) ?? []);\n}\n\n/**\n * Split a string by a regex pattern.\n *\n * NOTE:\n * Remember to group the patterns if you want to keep the delimiters\n*/\nexport function splitString(str: string, patt: RegExp, config: {trim?: boolean} = {}): string[] {\n  const split = str.split(patt);\n  if (config.trim) return split.map((s) => s.trim());\n  return split;\n}\n\n/**\n * Capitalizes all first letters of a string.\n * @param str\n * @returns\n */\nexport function capitalize(str: string): string {\n  if (str === '') return str;\n  const words = str.split(' ');\n  return words.map((w) => {\n    const chars = w.split('');\n    chars[0] = chars[0].toUpperCase();\n    return chars.join('');\n  }).join(' ');\n}\n\n/**\n * Capitalizes the first letter of a string.\n * @param str\n * @returns\n */\nexport function capitalizeFirst(str: string): string {\n  if (!str) return str;\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n}\n\n/**\n * Capitalizes all first letters of words that have a minimum length.\n * @param str\n * @param minLength - optional - the minimum word length to be capitalized. Defaults to 3.\n * @returns\n */\nexport function capitalizeWords(str: string, minLength = 3): string {\n  const re = new RegExp(`\\\\w{${minLength},}`, 'g');\n  return str.toLowerCase().replace(re, (match) => match.replace(/\\w/, (m) => m.toUpperCase()));\n}\n\n/**\n * Normalizes a string to URL compatible form\n * @param str\n * @returns\n */\nexport function normalizeUrl(str: string): string {\n  return normalizeString(str)\n    .replace(/\\s/g, '-')\n    .replace(/[^0-9a-z-]/gi, '')\n    .toLowerCase();\n}\n\ntype convertCamelCaseType = {\n  str: string,\n  insert?: string,\n  capitalize?: 'all' | 'first' | 'none'\n}\n/**\n * Converts a camel case string\n * @param str camelCase string\n * @param insert - optional - the char to insert between capital letters. Defaults to space\n * @param capitalize - optional - 'all' | 'first' | 'none'. Capitalizes the first letter or all first letters of words. Defaults to 'none'\n */\nexport function convertCamelCase({\n  str,\n  insert = ' ',\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  capitalize = 'none',\n}: convertCamelCaseType): string {\n  str = str[0].toLowerCase() + str.slice(1);\n  const result = str.replace(/([A-Z])/g, `${insert}$1`).toLowerCase();\n  if (capitalize === 'all') return capitalizeWords(result);\n  if (capitalize === 'first') return result.charAt(0).toUpperCase() + result.slice(1);\n  return result;\n}\n\n/**\n * Gets the filename from a path.\n *\n * (Last item after last forward slash)\n * @param path\n * @returns\n */\nexport const getFileNameFromPath = (path: string):string => path.split('/').slice(-1).join();\n\n/**\n * Generates a random string\n */\nexport function randomString(\n  length: number,\n  charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n): string {\n  return [...Array(length)]\n    .map((_) => charset[Math.floor(Math.random() * charset.length)])\n    .join('');\n}\n\n/**\n * Replaces all accented characters\n */\nexport function replaceAccents(str: string): string {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/** Function that count occurrences of a substring in a string;\n * @param string               The string\n * @param chars            The sub string to search for\n * @param [allowOverlapping]   Allows overlapping when performing matches\n *\n * @example\n * countCharsInString(\"foofoofoo\", \"foofoo\"); // 1\n * countCharsInString(\"foofoofoo\", \"foofoo\", true); // 2\n * countCharsInString(\"foofoofoo\"); // {f: 3, o: 6}\n * countCharsInString(\"foofoofoobarbarbar\", ['o', 'r']); // {o: 6, r: 3}\n */\nexport function countCharsInString(string: string, chars: string, allowOverlapping?: boolean): number\nexport function countCharsInString(string: string, chars?: string[] | null, allowOverlapping?: boolean): {[key: string]: number}\nexport function countCharsInString(string: string, chars?: string | string[] | null, allowOverlapping?: boolean): {[key: string]: number} | number\n// eslint-disable-next-line require-jsdoc\nexport function countCharsInString(string: string, chars?: string | string[] | null, allowOverlapping?: boolean): {[key: string]: number} | number {\n  if (!chars) {\n    return string\n      .split('')\n      .reduce((count, char) => ({\n        ...count,\n        [char]: (count[char] || 0) + 1,\n      }), {} as {[key: string]: number});\n  }\n\n  const doIt = (str: string, char: string) => {\n    str += '';\n    char += '';\n    if (char.length <= 0) return (str.length + 1);\n\n    let n = 0;\n    let pos = 0;\n    const step = allowOverlapping ? 1 : char.length;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      pos = str.indexOf(char, pos);\n      if (pos >= 0) {\n        n += 1;\n        pos += step;\n      } else break;\n    }\n    return n;\n  };\n\n  if (Array.isArray(chars)) {\n    return chars.reduce((count, ch) => ({\n      ...count,\n      [ch]: doIt(string, ch),\n    }), Object.fromEntries(chars.map((c) => ([c, 0]))) as {[key: string]: number});\n  }\n\n  return doIt(string, chars);\n}\n\nexport const doubleQuoteIfNotDoubleQuoted = (str: string) => {\n  const isDoubleQuoted = /^\".+\"$/.test(str);\n  if (isDoubleQuoted) return str;\n  return `\"${str}\"`;\n};\n"]}