{"version":3,"file":"timeFuncs.js","sourceRoot":"","sources":["../../../src/Time/timeFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH;;;;;GAKG;AACI,MAAM,yBAAyB,GAAG,CAAC,KAAa,EAAU,EAAE;IACjE,kCAAkC;IAClC,MAAM,QAAQ,GAAG,GAAG,CAAC;IACrB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACrC,MAAM,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;IAE1B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;AACnC,CAAC,CAAC;AAPW,QAAA,yBAAyB,6BAOpC;AAEF,MAAM,YAAY,GAAG,CAAC,KAAa,EAAE,IAAY,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAEnI;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,EAAmB,EAAE,IAAI,GAAG,EAAE;IACzD,MAAM,MAAM,GAAG,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACxD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACvC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,MAAM,GAAG,IAAI,CAAC;IAElC,MAAM,IAAI,GAAuB;QAC/B,CAAC,IAAI,EAAE,KAAK,CAAC;QACb,CAAC,KAAK,EAAE,MAAM,CAAC;QACf,CAAC,OAAO,EAAE,QAAQ,CAAC;QACnB,CAAC,OAAO,EAAE,QAAQ,CAAC;KACpB,CAAC;IAEF,IACE,IAAI,KAAK,CAAC;WACP,KAAK,KAAK,CAAC;WACX,OAAO,KAAK,CAAC,EAChB;QACA,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;KAChC;IAED,OAAO,IAAI;SACR,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;SAC9B,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACjD,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AA9BD,oCA8BC;AAEY,QAAA,QAAQ,GAAG,CAAC,SAAS,CAAC;IACjC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IACvB,OAAO;QACL,EAAE,CAAC,KAAa;YACd,OAAO;gBACL,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;gBAC7B,CAAC;gBACD,KAAK;oBACH,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;gBACpC,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;gBACzC,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;gBAC9C,CAAC;aACF,CAAC;QACJ,CAAC;QACD,CAAC,CAAC,KAAa;YACb,OAAO;gBACL,IAAI;oBACF,OAAO,KAAK,GAAG,IAAI,CAAC;gBACtB,CAAC;gBACD,KAAK;oBACH,OAAO,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;gBAC3B,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBACvC,CAAC;aACF,CAAC;QACJ,CAAC;QACD,GAAG,CAAC,KAAa;YACf,OAAO;gBACL,IAAI;oBACF,OAAO,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;gBAC3B,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,GAAG,EAAE,CAAC;gBACpB,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;gBAC3B,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAC;aACF,CAAC;QACJ,CAAC;QACD,CAAC,CAAC,KAAa;YACb,OAAO;gBACL,IAAI;oBACF,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;gBAChC,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,CAAC;gBACzB,CAAC;gBACD,KAAK;oBACH,OAAO,KAAK,GAAG,EAAE,CAAC;gBACpB,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;gBAC3B,CAAC;aACF,CAAC;QACJ,CAAC;QACD,CAAC,CAAC,KAAa;YACb,OAAO;gBACL,IAAI;oBACF,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC;gBACrC,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC9B,CAAC;gBACD,KAAK;oBACH,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,CAAC;gBACzB,CAAC;gBACD,GAAG;oBACD,OAAO,KAAK,GAAG,EAAE,CAAC;gBACpB,CAAC;aACF,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC,EAAE,CAAC,CAAC","sourcesContent":["/**\n * Time utility functions\n * @module TimeUtils\n * @category Time\n */\n\n/**\n * Returns the time elapsed\n * of two timestamps in miliseconds\n * @param start\n * @returns\n */\nexport const getDurationInMilliseconds = (start: bigint): number => {\n  // const NS_PER_SEC = BigInt(1e9);\n  const NS_TO_MS = 1e6;\n  const time = process.hrtime.bigint();\n  const diff = time - start;\n\n  return (Number(diff) / NS_TO_MS);\n};\n\nconst toTimeString = (value: number, name: string) => `${value} ${name}${Math.floor(value) > 1 && !name.endsWith('s') ? 's' : ''}`;\n\n/**\n * Converts a time (ms) to a human readable string\n * @param ms\n * @param bits - number of bits to convert BigInt\n * @returns\n */\nexport function readableTime(ms: number | bigint, bits = 64): string {\n  const timeMs = typeof ms === 'bigint' ? Number(BigInt.asIntN(bits, ms)) : ms;\n  const days = Math.floor(timeMs / (24 * 60 * 60 * 1000));\n  const daysMs = timeMs % (24 * 60 * 60 * 1000);\n  const hours = Math.floor(daysMs / (60 * 60 * 1000));\n  const hoursMs = timeMs % (60 * 60 * 1000);\n  const minutes = Math.floor(hoursMs / (60 * 1000));\n  const minutesMs = timeMs % (60 * 1000);\n  const seconds = Math.round(minutesMs / 1000);\n  const miliseconds = timeMs % 1000;\n\n  const data: [number, string][] = [\n    [days, 'day'],\n    [hours, 'hour'],\n    [minutes, 'minute'],\n    [seconds, 'second'],\n  ];\n\n  if (\n    days === 0\n    && hours === 0\n    && minutes === 0\n  ) {\n    data.push([miliseconds, 'ms']);\n  }\n\n  return data\n    .filter(([value]) => value > 0)\n    .map(([value, name]) => toTimeString(value, name))\n    .join(', ');\n}\n\nexport const TimeConv = (function _() {\n  const { floor } = Math;\n  return {\n    MS(value: number) {\n      return {\n        toS() {\n          return floor(value / 1000);\n        },\n        toMin() {\n          return floor(value / (60 * 1000));\n        },\n        toH() {\n          return floor(value / (60 * 60 * 1000));\n        },\n        toD() {\n          return floor(value / (60 * 60 * 24 * 1000));\n        },\n      };\n    },\n    S(value: number) {\n      return {\n        toMs() {\n          return value * 1000;\n        },\n        toMin() {\n          return floor(value / 60);\n        },\n        toH() {\n          return floor(value / (60 * 60));\n        },\n        toD() {\n          return floor(value / (60 * 60 * 24));\n        },\n      };\n    },\n    MIN(value: number) {\n      return {\n        toMs() {\n          return value * 1000 * 60;\n        },\n        toS() {\n          return value * 60;\n        },\n        toH() {\n          return floor(value / 60);\n        },\n        toD() {\n          return floor(value / (60 * 24));\n        },\n      };\n    },\n    H(value: number) {\n      return {\n        toMs() {\n          return value * 60 * 60 * 1000;\n        },\n        toS() {\n          return value * 60 * 60;\n        },\n        toMin() {\n          return value * 60;\n        },\n        toD() {\n          return floor(value / 24);\n        },\n      };\n    },\n    D(value: number) {\n      return {\n        toMs() {\n          return value * 60 * 60 * 1000 * 24;\n        },\n        toS() {\n          return value * 60 * 60 * 24;\n        },\n        toMin() {\n          return value * 60 * 24;\n        },\n        toH() {\n          return value * 24;\n        },\n      };\n    },\n  };\n}());\n"]}