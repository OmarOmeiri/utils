{"version":3,"file":"mathFuncs.js","sourceRoot":"","sources":["../../../src/Math/mathFuncs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Math utility functions\n * @module MathUtils\n * @category Math\n */\n\nimport { sortNumArray } from '../Arrays';\n\ninterface normalizeBetweenProps{\n  min?: number,\n  max?: number,\n  values: number[]\n}\n\nexport const normalizeBetween = ({\n  min = 0,\n  max = 1,\n  values,\n}: normalizeBetweenProps): number[] => {\n  const range = max - min;\n  const valuesMax = Math.max(...values);\n  const valuesMin = Math.min(...values);\n  const valuesRange = valuesMax - valuesMin;\n  const scaledValues = values.map((v) => ((((v - valuesMin) / (valuesRange)) * (range)) + min));\n  return scaledValues;\n};\n\n/**\n * Generates a scaler function\n */\nexport const genScale = ({\n  min,\n  max,\n  values,\n}: {\n  min: number,\n  max: number,\n  values: number[]\n}) => {\n  const range = Math.max(min, max) - Math.min(min, max);\n  const vmax = Math.max(...values);\n  const vmin = Math.min(...values);\n  const vRange = vmax - vmin;\n  return (n: number) => (\n    ((((n - vmin) / (vRange)) * (range)) + min)\n  );\n};\n\n/**\n * Generates a random int within the max and min range.\n * Maximum is exclusive and minimum is inclusive.\n * @param min\n * @param max\n */\nexport const getRandomInt = (\n  min: number,\n  max: number,\n): number => (\n  Math.floor(\n    Math.random() * (\n      Math.floor(max) - Math.ceil(min)\n    ) + Math.ceil(min),\n  )\n);\n\n/**\n * Generates a random decimal within the max and min range.\n * @param min\n * @param max\n * @param precision\n */\nexport const randomNumber = (min: number, max: number, precision?: number): number => {\n  if (!precision) return Math.random() * (max - min) + min;\n  return Number((Math.random() * (max - min) + min).toFixed(precision));\n};\n\n/**\n * Generates a random int within the max and min range with an arry of excludes.\n * Maximum is exclusive and minimum is inclusive.\n * @param min\n * @param max\n * @param excludes\n */\nexport const getRandomIntWithExclude = (\n  min: number,\n  max: number,\n  excludes: number[] = [],\n): number => {\n  if (min === max && excludes.includes(min)) throw new RangeError('All values are excluded');\n  if (min === max) return min;\n  // eslint-disable-next-line no-param-reassign\n  if (max < min) [max, min] = [min, max];\n\n  let num = getRandomInt(min, max);\n  if (!excludes.length) return num;\n\n  excludes\n    .sort((a, b) => a - b)\n    // eslint-disable-next-line no-return-assign\n    .every((except) => except <= num && (num >= max ? num -= 1 : num += 1, true));\n  if (excludes.includes(num)) throw new RangeError('All values are excluded');\n  return num;\n};\n\n/**\n  * Calculates the distance betwee two geographic points\n  * @param lat1\n  * @param lon1\n  * @param lat2\n  * @param lon2\n  */\nexport function harversineDistance({\n  lat1,\n  lon1,\n  lat2,\n  lon2,\n}:{\n   lat1: number,\n   lon1: number,\n   lat2: number,\n   lon2: number,\n }): number {\n  const dlon = lon2 - lon1;\n  const dlat = lat2 - lat1;\n  const a = (Math.sin(dlat / 2)) ** 2 + Math.cos(lat1) * Math.cos(lat2) * (Math.sin(dlon / 2)) ** 2;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = 6373 * c; // where R is the radius of the Earth 6373km\n  return d;\n}\n\nexport interface ILinReg {\n   points: {\n     x: number,\n     y: number,\n   }[],\n   slope: number | null,\n   intercept: number,\n }\n /**\n  * Simple linear regression\n  *\n  * @param data\n  * @return\n  */\nexport const linearRegression = (data: [number, number][]): ILinReg => {\n  let sum_x = 0;\n  let sum_y = 0;\n  let sum_xy = 0;\n  let sum_xx = 0;\n  let count = 0;\n\n  if (data.length === 0) {\n    throw new Error('Empty data');\n  }\n\n  // calculate sums\n  for (let i = 0, len = data.length; i < len; i++) {\n    const point = data[i];\n    sum_x += point[0];\n    sum_y += point[1];\n    sum_xx += point[0] * point[0];\n    sum_xy += point[0] * point[1];\n    count += 1;\n  }\n\n  // calculate slope (m) and y-intercept (b) for f(x) = m * x + b\n  const slope = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);\n  const intercept = (sum_y / count) - (slope * sum_x) / count;\n\n  const points = data.map((point) => {\n    const y = slope * point[0] + intercept;\n    return { x: point[0], y };\n  });\n  return { points, slope, intercept };\n};\n\n/**\n * Performs a linear regression from an object array\n *\n * If called with a string value key for x, is expected that the data is sorted,\n * because the y value will become the index position\n */\nexport const objArrayLinearRegression = <\nT extends Record<string, unknown>,\nNumKey extends KeysOfType<T, number>,\nNumOrOrdinalKey extends KeysOfType<T, number | string>\n>(\n    inputArray: T[],\n    xLabel: NumOrOrdinalKey,\n    yLabel: NumKey,\n  ) => {\n  const xTypeSet = new Set<string>();\n  const yTypeSet = new Set<string>();\n  inputArray.forEach((v) => {\n    xTypeSet.add(typeof v[xLabel]);\n    yTypeSet.add(typeof v[yLabel]);\n  });\n  if (xTypeSet.size > 1) {\n    throw new Error('X values cannot have multiple types.');\n  }\n  if (yTypeSet.size > 1) {\n    throw new Error('Y values can only be numbers.');\n  }\n  const xy = inputArray.map((element, i) => {\n    const elmX = element[xLabel];\n    const elmY = element[yLabel];\n    if (typeof elmY !== 'number') {\n      throw new Error('Y must be a number.');\n    }\n    if (typeof elmX === 'number') return [elmX, elmY] as [number, number];\n    return [i, elmY] as [number, number];\n  });\n\n  return linearRegression(xy);\n};\n\n/**\n * Returns the value between two numbers at a specified, decimal midpoint:\n * @param lower\n * @param upper\n * @param val\n * @example\n * lerp(20, 80, 0)   // 20\n * lerp(20, 80, 1)   // 80\n * lerp(20, 80, 0.5) // 40\n */\nexport const lerp = (lower: number, upper: number, val: number): number => lower * (1 - val) + upper * val;\n\n/**\n * Constricts a value between a range\n * @param val\n * @param min\n * @param max\n * @example\n * clamp(24, 20, 30) // 24\n * clamp(12, 20, 30) // 20\n * clamp(32, 20, 30) // 30\n */\nexport const clamp = (val: number, min = 0, max = 1): number => Math.min(max, Math.max(min, val));\n\n/**\n * This works in the opposite way to the lerp.\n * Instead of passing a decimal midpoint, you pass any value, and it’ll return that decimal, wherever it falls on that spectrum\n *\n * @param lower\n * @param upper\n * @param val\n * @example\n * invlerp(50, 100, 75)  // 0.5\n * invlerp(50, 100, 25)  // 0\n * invlerp(50, 100, 125) // 1\n *\n */\nexport const invlerp = (lower: number, upper: number, val: number): number => clamp((val - lower) / (upper - lower));\n\n/**\n * Converts a value from one data range to another.\n * @param lower1\n * @param upper1\n * @param lower2\n * @param upper2\n * @param val\n * @example\n * //    Range 1    Range 2    Value\n * range(10, 100, 2000, 20000, 50) // 10000\n */\nexport const transformRange = (\n  lower1: number,\n  upper1: number,\n  lower2: number,\n  upper2: number,\n  val: number,\n): number => lerp(lower2, upper2, invlerp(lower1, upper1, val));\n\n/**\n * Calculates the mean of a set of numbers\n * @param nums\n */\nexport const mean = (...nums: number[]): number => {\n  if (!nums.length) return 0;\n  return (nums.reduce((val, acc) => val + acc, 0)) / nums.length;\n};\n\nexport const sum = (...nums: number[]): number => {\n  if (!nums.length) return 0;\n  return (nums.reduce((val, acc) => val + acc, 0));\n};\n\nexport const round = (num: number, decimalPlaces: number) => {\n  const strNum = num.toString();\n  const isExp = strNum.includes('e');\n  if (isExp) {\n    return Number(num.toPrecision(decimalPlaces + 1));\n  }\n\n  return Number(\n    `${Math.round(Number(`${num}e${decimalPlaces}`))}e${decimalPlaces * -1}`,\n  );\n};\n\nexport const arrayProd = (...nums: number[]): number => {\n  if (!nums.length) return 0;\n  return (nums.reduce((val, acc) => val * acc, 0));\n};\n\nexport const variance = (arr: number[]) => arr\n  .reduce((s, n) => s + (n - mean(...arr)) ** 2, 0) / (arr.length - 1);\n\nexport const stdDev = (nums: number[]) => Math.sqrt(variance(nums));\n\nexport const zScores = (arr: number[]) => {\n  const mn = mean(...arr);\n  const sd = stdDev(arr);\n  return arr.map((x) => ((x - mn) / sd));\n};\n\nexport const zScore = (x: number, arr: number[]) => {\n  const mn = mean(...arr);\n  const sd = stdDev(arr);\n  return ((x - mn) / sd);\n};\n\n/**\n  * Calculates the median of an array of Numbers\n  * @param arr\n  * @returns\n  */\nexport function median(arr: number[]): number {\n  const { length } = arr;\n  const isEven = length % 2 === 0;\n  const sorted = sortNumArray(arr);\n\n  return isEven\n    ? (sorted[(length / 2 - 1)] + sorted[length / 2]) / 2\n    : sorted[((length + 1) / 2) - 1];\n}\n\nexport const medianAlreadySorted = (sortedArr: number[]) => {\n  const { length } = sortedArr;\n  const isEven = length % 2 === 0;\n  return isEven\n    ? (sortedArr[(length / 2 - 1)] + sortedArr[length / 2]) / 2\n    : sortedArr[((length + 1) / 2) - 1];\n};\n\nexport const IQR = (arr: number[]) => {\n  const mid = Math.floor(arr.length / 2);\n  const sorted = [...arr].sort((a, b) => a - b);\n  const isEven = sorted.length % 2 === 0;\n\n  const split: [number, number] = isEven\n    ? [mid, mid]\n    : [mid, mid + 1];\n\n  const q1 = medianAlreadySorted(sorted.slice(0, split[0]));\n  const q3 = medianAlreadySorted(sorted.slice(split[1]));\n  return q3 - q1;\n};\n\nexport const IQRAlreadySorted = (sorted: number[]) => {\n  const mid = Math.floor(sorted.length / 2);\n  const isEven = sorted.length % 2 === 0;\n\n  const split: [number, number] = isEven\n    ? [mid, mid]\n    : [mid, mid + 1];\n\n  const q1 = medianAlreadySorted(sorted.slice(0, split[0]));\n  const q3 = medianAlreadySorted(sorted.slice(split[1]));\n  return q3 - q1;\n};\n\nexport const getBinWidth = (data: Array<number>) => (\n  (2 * IQR(data)) / data.length ** (1 / 3)\n);\n\nexport const getBinWidthSorted = (data: Array<number>) => (\n  // (2 * IQRAlreadySorted(data)) / data.length ** (1 / 3)\n  ((1 / data.length ** (1 / 3)) * stdDev(data)) * 3.49\n);\n\nconst getBinNumber = (i: number, bw: number) => (\n  Math.floor(i / bw)\n);\n\n/**\n * Bins an array of numbers\n * @param data\n * @param normalize If true, will return the relative percentages instead of count\n * @returns\n */\nexport const createBins = (data: number[], normalize = false) => {\n  const { length } = data;\n  const sorted = [...data].sort((a, b) => a - b);\n  const bw = getBinWidthSorted(sorted);\n  let first = 0;\n  const bins: [number, number][] = [];\n  for (let i = 0; i < length; i += 1) {\n    const binNumber = getBinNumber(sorted[i], bw);\n    if (!i) first = binNumber;\n    const index = binNumber - first;\n    if (bins[index]) {\n      bins[index] = [\n        bins[index][0],\n        bins[index][1] + 1,\n      ];\n    } else {\n      bins[index] = [\n        sorted[i],\n        1,\n      ];\n    }\n  }\n  if (normalize) {\n    return bins.reduce((b, val) => [\n      ...b,\n      [val[0], val[1] / length] as [number, number],\n    ], [] as [number, number][]);\n  }\n  return bins.filter((b) => b);\n};\n\n/**\n *  Rounds a number to a given multiple\n * @param x\n * @param mult\n * @param type\n * @returns\n */\nexport const roundToMultiple = (x: number, mult: number, type: 'ceil' | 'floor' | 'nearest') => {\n  if (type === 'ceil') return Math.ceil(x / mult) * mult;\n  if (type === 'floor') return Math.floor(x / mult) * mult;\n  return Math.round(x / mult) * mult;\n};\n\nexport const pctChange = (vi: number, vf: number) => (\n  (vf - vi) / Math.abs(vi)\n);\n\nexport const trapezoidArea = (base: number, h1: number, h2: number) => {\n  const extraH = Math.abs(h2 - h1);\n  const quadH = Math.max(h2, h1) - extraH;\n  return (quadH * base) + ((extraH * base) / 2);\n};\n"]}