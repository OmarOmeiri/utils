{"version":3,"file":"arrayFuncs.js","sourceRoot":"","sources":["../../../src/Arrays/arrayFuncs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable arrow-body-style */\n/**\n * Exports all functions related to array manipulation.\n * @module ArrayUtils\n * @category Array\n */\nimport _l, {\n  orderBy,\n  filter,\n  cloneDeep,\n  isEqual,\n  uniqWith,\n} from 'lodash';\nimport { getRandomInt } from '../Math';\n\nexport type ArraySortOrder = 'asc' | 'desc';\n\n/**\n * Deep comparison of two arrays.\n * @param x\n * @param y\n * @returns\n */\n// eslint-disable-next-line func-names\nexport const isArrayEqual = function (x: any[], y: any[]): boolean {\n  return _l(x).differenceWith(y, isEqual).isEmpty();\n};\n\nexport const isNumberArray = (\n  arr: Array<unknown>,\n  options?: {testLengthPct?: number, nullable?: boolean},\n): arr is number[] => {\n  const lng = Math.max(Math.floor(arr.length * (options?.testLengthPct || 0.15)), 1);\n  return arr.slice(0, lng).every((e) => {\n    if (options?.nullable && (typeof e === 'number' || e === null)) return true;\n    return typeof e === 'number';\n  });\n};\n\nexport const findIndexes = <T>(arr: T[], cb: (value: T, i: number) => boolean) => (\n  arr.reduce((c, v, i) => {\n    if (cb(v, i)) return [...c, i];\n    return c;\n  }, [] as number[])\n);\n\n/**\n * Calls a callback function\n * whenever the chunks reach the given size\n * @param iter\n * @param cb\n * @param size\n * @param unbox If the iterator yields array, you can pass `true` to flatten\n */\nexport async function breakChunks<T>(\n  iter: AsyncGenerator<T[], void, any>,\n  cb: (T: T[]) => Promise<any>,\n  size: number,\n  unbox: true,\n): Promise<void>\nexport async function breakChunks<T>(\n  iter: AsyncGenerator<T[], void, any>,\n  cb: (T: T[]) => Promise<any>,\n  size: number,\n  unbox: false,\n): Promise<void>\nexport async function breakChunks<T>(\n  iter: AsyncGenerator<T, void, any>,\n  cb: (T: T[]) => Promise<any>,\n  size: number,\n  unbox?: undefined,\n): Promise<void>\nexport async function breakChunks<T>(\n  iter: AsyncGenerator<T | T[], void, any>,\n  cb: (T: T[] | T[][number]) => Promise<any>,\n  size: number,\n  unbox?: boolean,\n): Promise<void>\n// eslint-disable-next-line require-jsdoc\nexport async function breakChunks<T>(\n  iter: AsyncGenerator<T | T[], void, any>,\n  cb: (T: T[] | T[][number]) => Promise<any>,\n  size: number,\n  unbox = false,\n): Promise<void> {\n  const chunks: T[] = [];\n  for await (const i of iter) {\n    if (unbox && Array.isArray(i)) {\n      const flattened = i.flat(Infinity) as T[];\n      chunks.push(...flattened);\n    } else chunks.push(i as T);\n    if (chunks.length >= size) {\n      await cb(chunks);\n      chunks.length = 0;\n    }\n  }\n\n  if (chunks.length) {\n    await cb(chunks);\n  }\n}\n\n/**\n * Removes a given value from an array\n *\n * IMPORTANT: This function removes values inPlace!!\n * It modifies the original array!\n * @param arr any array\n * @param value a value to be removed\n * @returns {Boolean} indication that the value was sucessfully removed\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const removeValueFromArray = (arr: any[], value: any): boolean => {\n  const index = arr.indexOf(value);\n  if (index !== -1) {\n    arr.splice(index, 1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes duplicates of an array of objects by property name\n * @param arr\n * @param prop\n * @returns\n */\n// @ts-ignore\nexport const removeDuplicatesFromObjArrayByPropName = <T extends Array<Record<string, unknown>>>(arr: T, prop: keyof T[number]): T => Array.from(\n  arr\n    .reduce(\n      (acc, item) => ((\n        item && item[prop as string] && acc.set(item[prop as string], item),\n        acc\n      )),\n      new Map(),\n    )\n    .values(),\n);\n\n/**\n * Removes duplicates of an array of objects by property name (Multi)\n * @param arr\n * @param prop\n * @returns\n */\nexport const removeDuplicatesFromObjArrayByPropNames = <T extends Array<Record<string, unknown>>>(arr: T, props: (keyof T[number])[]): T => [...arr.reduce((m, r) => {\n  const key = props.reduce((val, acc, i) => {\n    if (!i) return `${r[val as string]}${r[acc as string]}`;\n    return `${r[val as string]}-${r[acc as string]}`;\n  });\n  return m.has(key) ? m : m.set(key, r);\n}, new Map()).values()] as T;\n\n/**\n * Return all data types contained in an array\n * @param arr\n */\nexport function getTypesInArray(arr: any[], unique?: boolean): string[] {\n  const types = arr.reduce((tps, val) => {\n    if (!tps.includes(typeof val)) tps.push(typeof val);\n    return tps;\n  }, []);\n  if (!unique) return types;\n  return Array.from(new Set(types));\n}\n\n/**\n * Counts occurences of every element in an array.\n * @param arr\n * @example\n *\n * countOccurences(['a', 'b', 'a', 'c', 'd', 'd']) =>\n * [\n *   { search: 'a', innerCount: 2 },\n *   { search: 'b', innerCount: 1 },\n *   { search: 'c', innerCount: 1 },\n *   { search: 'd', innerCount: 2 }\n * ]\n */\nexport function countOccurences<T>(arr: T[]): {\n  search: T,\n  innerCount: number,\n}[] {\n  const uniqValues = Array.from(new Set(arr));\n  const outerCount = uniqValues.map((search) => {\n    const innerCount = arr.reduce((n, val) => n + Number(val === search), 0);\n    return { search, innerCount };\n  });\n  return outerCount;\n}\n\n/**\n * Counts occurences of a single element in an array.\n * @param arr\n * @param elm the element to be counted\n * @returns\n */\nexport function countOccurence(arr: any[], elm: unknown): number {\n  let count = 0;\n  arr.forEach((e) => {\n    if (e === elm) {\n      count += 1;\n    }\n  });\n  return count;\n}\n\n/**\n * Filter an array of objects by a condition that returns a boolean\n * @param obj\n * @param condition\n * @returns\n */\nexport const filterObjArr = <T>(obj: T[], condition: (o: T) => boolean): T[] => filter(obj, condition);\n\n/**\n * Returns the difference between two arrays.\n * @param arr1\n * @param arr2\n * @returns the elements that are in 'arr1' but not in 'arr2'\n */\nexport const arrayDiff = <T>(arr1: T[], arr2: T[]) => {\n  return arr1.filter((x) => !arr2.some((y) => isEqual(x, y)));\n};\n\n/**\n * Returns the outer join of two arrays.\n * @param arr1\n * @param arr2\n * @returns the elements that are not in both arrays\n */\nexport const arrayOuterJoin = <T>(arr1: T[], arr2: T[]): T[] => {\n  return [\n    ...arr1.filter((x) => !arr2.some((y) => isEqual(x, y))),\n    ...arr2.filter((x) => !arr1.some((y) => isEqual(x, y))),\n  ];\n};\n\n/**\n * Returns the inner join of two arrays.\n * @param arr1\n * @param arr2\n * @returns the elements that are in both arrays\n */\nexport const arrayInnerJoin = <T>(arr1: T[], arr2: T[]): T[] => {\n  return arr1.filter((x) => arr2.some((y) => isEqual(x, y)));\n};\n\n/**\n * Aggrupates arrays in a given size\n * @param {Array} array array to be gruped / chunked\n * @param {Number} size size of the chunks\n * @returns\n */\nexport function chunk<T>(array: T[], size: number): T[][] {\n  const chunks = [];\n  const arrLength = array.length;\n  const chunkNum = arrLength / size;\n  for (let i = 0; i < chunkNum; i += 1) {\n    chunks.push(array.slice(i * size, (i + 1) * size));\n  }\n  return chunks;\n}\n\n/**\n * Aggrupates arrays in a given size\n * @param {Array} array array to be gruped / chunked\n * @param {Number} size size of the chunks\n * @returns\n */\nexport function* genChunk<T>(array: T[], size: number): Generator<T[], void, unknown> {\n  const arrLength = array.length;\n  const chunkNum = arrLength / size;\n  for (let i = 0; i < chunkNum; i += 1) {\n    yield array.slice(i * size, (i + 1) * size);\n  }\n}\n\n/**\n * Searches an array for a regex match.\n * @param arr\n * @param pattern\n * @returns {Boolean}\n */\nexport const matchArrayRegex = (arr: string[], pattern: RegExp): boolean => {\n  return !!arr.find((s) => pattern.test(s));\n};\n\n/**\n * Sorts an array of objects by key\n *\n * IMPORTANT:\n * Sorts in ascending order by default\n * @param arr\n * @param key\n * @param order\n * @returns\n */\nexport const sortObjArray = <T>(arr: T[], key: string, order: ArraySortOrder = 'asc'): T[] => {\n  return orderBy(arr, [key], [order]);\n};\n\nexport const sortNumArray = (arr: number[], order: ArraySortOrder = 'asc'): number[] => {\n  if (order === 'asc') {\n    return [...arr].sort((a, b) => a - b);\n  }\n  return [...arr].sort((a, b) => b - a);\n};\n\n/**\n * Sorts an array of objects by key IGNORES CASING\n * @param arr\n * @param key\n * @param order\n * @returns\n *\n * IMPORTANT!!\n *\n * Make sure the values are strings or numbers\n */\nexport const sortObjArrayIgCase = <T extends Record<string, unknown>>(arr: T[], key: string, order: ArraySortOrder = 'asc'): T[] => {\n  if (!arr.length) return arr;\n  let isNum = true;\n  for (const v of arr) {\n    if (Number.isNaN(Number(v[key]))) {\n      isNum = false;\n      break;\n    }\n  }\n  if (isNum) {\n    return orderBy(arr, [(val) => Number(val[key])], [order]);\n  }\n  return orderBy(arr, [(val) => ((val[key] as any).toString()).normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase()], [order]);\n};\n\nexport const sortStrArr = (arr: string[], order: ArraySortOrder = 'asc'): string[] => {\n  const sorted = [...arr]\n    .sort((a, b) => a\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .localeCompare(b, 'en', { sensitivity: 'base' }));\n  if (order === 'asc') return sorted;\n  return sorted.reverse();\n};\n\n/**\n * Sorts an array of Objects by another array\n *\n * Puts elements that are not found in the sorting index at the end\n * @param array\n * @param order\n * @param key\n * @example\n * item_array = [\n *   { id: 2, label: 'Two' },\n *   { id: 3, label: 'Three' },\n *   { id: 5, label: 'Five' },\n *   { id: 4, label: 'Four' },\n *   { id: 1, label: 'One'},\n * ];\n *\n * item_order = [1,2,3,4,5];\n *\n * ordered_array = mapOrder(item_array, item_order, 'id');\n *\n * [\n *  { id: 1, label: 'One'},\n *  { id: 2, label: 'Two' },\n *  { id: 3, label: 'Three' },\n *  { id: 4, label: 'Four' },\n *  { id: 5, label: 'Five' },\n * ]\n *\n */\nexport const sortObjArrayByArrayAndKey = <T, K extends keyof T>(\n  array: T[],\n  order: T[K][],\n  key: K,\n): T[] => {\n  const [\n    includedInSortingIndex,\n    notIncludedInSortingArray,\n  ] = array.reduce((incl, val) => {\n    if (order.includes(val[key])) incl[0].push(val);\n    else incl[1].push(val);\n    return incl;\n  }, [[], []] as [T[], T[]]);\n\n  return [\n    ...includedInSortingIndex.slice().sort((a, b) => {\n      const A = a[key];\n      const B = b[key];\n      return order.indexOf(A) - order.indexOf(B);\n    }),\n    ...notIncludedInSortingArray,\n  ];\n};\n\n/**\n * Generates an array of unique numbers\n * @param min\n * @param max\n * @param size\n */\nexport function genRndNumUniqArray(min: number, max: number, size: number): number[] {\n  const rng = Math.min(max - min, size);\n  if (rng < 1) return [];\n  const nums = new Set<number>();\n  while (nums.size !== rng) {\n    const n = getRandomInt(min, max);\n    nums.add(n);\n  }\n  return Array.from(nums);\n}\n\n/**\n * Searches a substring array for a given string\n * @param str\n * @param substrArr\n * @returns\n */\nexport const matchStringInArrayofSubstr = (str: string, substrArr: string[]): boolean => {\n  const lng = substrArr.length;\n  let found = false;\n  for (let i = 0; i < lng; i += 1) {\n    if (str.includes(substrArr[i])) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n};\n\n/**\n * Sums a 2D array by columns\n * @param arr\n * @returns\n */\nexport const sum2DArrayCols = (arr: number[][]): number[] => {\n  const newArray: number[] = [];\n  arr.forEach((sub) => {\n    sub.forEach((num, index) => {\n      if (newArray[index]) {\n        newArray[index] += num;\n      } else {\n        newArray[index] = num;\n      }\n    });\n  });\n  return newArray;\n};\n\n/**\n * Filters an array of objects by an array of key value pairs\n * @param arr\n * @param filterPairs\n * @example\n * itemArray = [\n *   { id: 2, label: 'Two' },\n *   { id: 3, label: 'Three' },\n *   { id: 5, label: 'Five' },\n *   { id: 4, label: 'Four' },\n *   { id: 1, label: 'One'},\n * ];\n *\n * filterPairs = [\n *  ['id', 2],\n *  ['label', 'Three']\n * ];\n *\n * filteredArray = filterArrOfObjsByKeyValuePair(itemArray, filterPairs);\n *\n * [\n *  { id: 2, label: 'Two' },\n *  { id: 3, label: 'Three' },\n * ]\n *\n */\nexport const filterArrOfObjsByKeyValuePair = <T extends Record<any, any>>(arr: T[], filterPairs: [any, any][]): T[] => {\n  const copy = cloneDeep(arr)\n    .filter((i) => {\n      let filterValue = true;\n      filterPairs.forEach((fp) => {\n        if (Object.keys(i).includes(fp[0])) {\n          if (i[fp[0]] !== fp[1]) {\n            filterValue = false;\n          }\n        }\n      });\n      return filterValue;\n    });\n  return copy;\n};\n\n/**\n * Filters an array of objects by an array of key value pairs\n *\n * IMPORTANT: Order is not guaranteed\n *\n * Returns a tuple. The first item is an object indexed by the chunk name\n * and the second item are the chunk names\n * @param arr\n * @param key\n * @example\n * itemArray = [\n *   { id: 2, label: 'Two', chunk: 1 },\n *   { id: 3, label: 'Three', chunk: 2 },\n *   { id: 5, label: 'Five', chunk: 2 },\n *   { id: 4, label: 'Four', chunk: 3 },\n *   { id: 1, label: 'One', chunk: 1},\n * ];\n *\n * chunked= chunkArrOfObjsByKeyAndValue(itemArray, 'chunk');\n *  [\n *    {\n *      '1': [\n *             { id: 2, label: 'Two', chunk: 1 },\n *             { id: 1, label: 'One', chunk: 1},\n *           ],\n *      '2': [\n *             { id: 3, label: 'Three', chunk: 2 },\n *             { id: 5, label: 'Five', chunk: 2 },\n *           ],\n *      '3': [\n *             { id: 4, label: 'Four', chunk: 3 },\n *           ]\n *    },\n *    ['1', '2', '3']\n *  ]\n */\nexport const chunkArrOfObjsByKeyAndValue = <T extends Record<any, any>>(arr: T[], key: keyof T): [{[key: string]: T[]}, (keyof T)[]] => {\n  const copy = cloneDeep(arr);\n  const chunkNames = Array.from(new Set(copy.map((i) => i[key])));\n  const chunked: {\n    [key: string]: T[]\n  } = {};\n\n  chunkNames.forEach((n) => {\n    chunked[n] = copy.filter((c) => c[key] === n);\n  });\n\n  return [chunked, chunkNames.map((n) => n.toString())];\n};\n\n/**\n * Replaces an object in an object array by a key value pair\n *\n * IMPORTANT:\n *\n * If the object was not found, this function will insert the object into the array\n *\n * @param arr\n * @param replacement\n * @param keyVal\n * @returns\n */\nexport const replaceInObjArrayByKeyValue = <T extends Record<any, any>>(arr: T[], replacement: T, keyVal: [keyof T, any]): T[] => {\n  let found = false;\n  const newObj = arr.map((obj) => {\n    if (obj[keyVal[0]] === keyVal[1]) {\n      found = true;\n      // eslint-disable-next-line no-param-reassign\n      obj = replacement;\n    }\n    return obj;\n  });\n\n  if (!found) return [...arr, replacement];\n  return newObj;\n};\n\n/**\n * Replaces items in an array of objects based on a replacements array and a key\n * @param arr\n * @param replacements\n * @param keyToMatch\n * @param [insertIfNotFound] If 'true' will insert the replacement if not found. Defaults to false\n *\n *\n * IMPORTANT!!!\n *\n * The \"keyToMatch\" value should be a string or a number. (UNIQUE)\n *\n * If the object wasn't found, it will push the replacement at the end\n *\n * @example\n *\n * const arr = [\n *  {\n *    id: '1',\n *    value: 'value1'\n *  },\n *  {\n *    id: '2',\n *    value: 'value2'\n *  },\n *  {\n *    id: '3',\n *    value: 'value3'\n *  },\n *  {\n *    id: '4',\n *    value: 'value4'\n *  },\n * ]\n *\n * const replacements = [\n *  {\n *    id: '2',\n *    value: 'newValue2'\n *  },\n *  {\n *    id: '4',\n *    value: 'newValue4'\n *  }\n * ]\n *\n * replaceItemsInObjArray(arr, replacements, 'id') => [\n *  {\n *    id: '1',\n *    value: 'value1'\n *  },\n *  {\n *    id: '2',\n *    value: 'newValue2'\n *  },\n *  {\n *    id: '3',\n *    value: 'value3'\n *  },\n *  {\n *    id: '4',\n *    value: 'newValue4'\n *  },\n * ]\n */\nexport const replaceItemsInObjArray = <T>(arr: T[], replacements: T[], keyToMatch: keyof T, insertIfNotFound = false): T[] => {\n  const notFoundKeys: T[keyof T][] = [];\n  const replMap = new Map(replacements.map((e) => [e[keyToMatch], e]));\n  const newArr = arr.map((obj) => {\n    if (replMap.has(obj[keyToMatch])) {\n      return replMap.get(obj[keyToMatch]) as T;\n    }\n    notFoundKeys.push(obj[keyToMatch]);\n    return obj;\n  });\n\n  if (!insertIfNotFound) {\n    return newArr;\n  }\n  return [\n    ...newArr,\n    ...notFoundKeys.map((k) => replacements.find((r) => r[keyToMatch] === k)) as T[],\n  ];\n};\n\n/**\n * Checks if an array has any element contained in another array\n * @param arrToFind\n * @param arr\n * @returns\n */\nexport const arrayIncludesAnotherArray = <T extends unknown[]>(arrToFind: T, arr: T): boolean => (arrToFind ?? []).some((v) => arr.includes(v));\n\n/**\n * Checks if an array has every element contained in another array\n * @param arrToFind\n * @param arr\n * @returns\n */\nexport const arrayIncludesAnotherArrayAll = <T extends unknown[]>(arrToFind: T, arr: T): boolean => (arrToFind ?? []).every((v) => arr.includes(v));\n\ntype filterObjectByKeysOverload = {\n  <T>(obj: T, keys: string | string[], inplace: true): undefined,\n  <T>(obj: T, keys: string | string[], inplace?: false): Partial<T>,\n}\n\n/**\n * Filters an object by a key or an array of keys.\n *\n * inplace = true modifies the original object\n * @param obj\n * @param keys\n */\nexport const filterObjectByKeys: filterObjectByKeysOverload = <T extends Record<string, unknown>>(\n  obj: T,\n  keys: keyof T | (keyof T)[],\n  inplace = false,\n// @ts-ignore\n// eslint-disable-next-line consistent-return\n): T => {\n  const ks = Array.isArray(keys) ? keys : [keys];\n  if (inplace) {\n    Object.fromEntries(Object.entries(obj).filter(([key]) => ks.includes(key)));\n  } else {\n    const copy = cloneDeep(obj);\n    return Object.fromEntries(Object.entries(copy).filter(([key]) => ks.includes(key))) as T;\n  }\n};\n\n/**\n * Removes an element from an array by index.\n *\n * Defaults to returning a new array\n *\n * If 'inPlace === true' it modifies the current array\n * @param arr\n * @param index\n * @param inPlace\n * @returns\n */\nexport function removeByIndex<T>(arr: T[], index: number, inPlace?: false): T[]\nexport function removeByIndex<T>(arr: T[], index: number, inPlace: true): void\n// eslint-disable-next-line consistent-return, require-jsdoc\nexport function removeByIndex<T>(arr: T[], index: number, inPlace = false): T[] | void {\n  if (!inPlace) return arr.slice(0, index).concat(arr.slice(index + 1));\n  arr.splice(index, 1);\n}\n\n/**\n * Picks a random values in an array\n *\n * IMPORTANT!!\n *\n * If the array has length less than or equal the\n * number of elements to pick, it will return the original array\n * @param arr\n * @param n\n * @param unique\n */\nexport function pickRandom<T>(arr: T[] | ReadonlyArray<T>, n?: undefined, unique?: boolean): T\nexport function pickRandom<T>(arr: T[] | ReadonlyArray<T>, n: number, unique?: boolean): T[]\nexport function pickRandom<T>(arr: T[] | ReadonlyArray<T>, n?: number, unique?: boolean): T[] | ReadonlyArray<T> | T\n// eslint-disable-next-line require-jsdoc\nexport function pickRandom<T>(arr: T[] | ReadonlyArray<T>, n?: number, unique?: boolean): T[] | ReadonlyArray<T> | T {\n  const isUndefParam = !!(!n && n !== 0);\n  // eslint-disable-next-line no-param-reassign\n  if (!n && n !== 0) n = 1;\n\n  if (n < 1) return [];\n  const { length } = arr;\n  if (n >= length && !unique) {\n    if (isUndefParam) return arr[getRandomInt(0, length)];\n    return arr;\n  }\n  if (n >= length && unique) {\n    const uniq = uniqWith(arr, isEqual);\n    if (isUndefParam) return uniq[getRandomInt(0, uniq.length)];\n    return uniq;\n  }\n  const pick = () => Math.floor(Math.random() * (Math.floor(length) - Math.ceil(0)) + Math.ceil(0));\n  if (!unique) {\n    const picked = [...Array(n)].map(() => arr[pick()]);\n    if (n === 1 && isUndefParam) return picked[0];\n    return picked;\n  }\n\n  const rng = Math.min(arr.length, n);\n  const nums = new Set<number>();\n  while (nums.size !== rng) {\n    nums.add(getRandomInt(0, length));\n  }\n  const picked = [...nums].map((i) => arr[i]);\n  if (n === 1 && isUndefParam) return picked[0];\n  return picked;\n}\n\n/**\n * Performs a asynchronous filter concurrently\n * @param arr\n * @param cb\n * @returns\n */\nexport async function asyncFilter<T>(arr: T[], cb: (...args: [e: T, i: number]) => Promise<boolean>): Promise<T[]> {\n  const results = await Promise.all(arr.map(cb));\n  return arr.filter((_v, index) => results[index]);\n}\n\n/**\n * Gets the duplicate elements of an object array by key\n *\n * IMPORTANT!\n *\n * Will return the duplicates elements more than once\n */\nexport function getObjDuplicatesByKey<O extends Record<PropertyKey, unknown>>(arr: O[], key: keyof O): O[] {\n  const lookup = arr.reduce((a, e) => {\n    a.set(e[key], (a.get(e[key]) ?? 0) + 1);\n    return a;\n  }, new Map());\n\n  return arr.filter((e) => lookup.get(e[key]) > 1);\n}\n\n/**\n * Gets the duplicate elements of an object array by key\n *\n * IMPORTANT!\n *\n * If unique is false or undefined will return the duplicated elements more than once.\n * if true, will return only once\n */\nexport function findDuplicates<T extends Exclude<Primitives, symbol> | Date>(arr: T[], unique?: boolean): T[] {\n  const primArr = arr.map((e) => {\n    if (e instanceof Date) return e.toString();\n    return e as Exclude<Primitives, symbol>;\n  });\n\n  const lookup = primArr.reduce((a, e) => {\n    a.set(e, (a.get(e) ?? 0) + 1);\n    return a;\n  }, new Map());\n\n  const dupes = arr.filter((e) => lookup.get(e) > 1);\n  if (!unique) return dupes;\n  return [...new Set(dupes)];\n}\n\nexport const findDuplicateString = (strings: string[]): boolean => {\n  const table: { [key: string]: boolean} = {};\n  for (const string of strings) {\n    if (string in table) return true;\n    table[string] = true;\n  }\n  return false;\n};\n\n/**\n * Perform an asynchronous filter sequentially\n * @param arr\n * @param cb\n * @returns\n */\nexport async function asyncFilterSeq<T>(arr: T[], cb: (...args: [e: T, i: number]) => Promise<boolean>): Promise<T[]> {\n  return arr.reduce(\n    async (memo, e, i) => [...await memo, ...await cb(e, i) ? [e] : []],\n  Promise.resolve([]) as Promise<T[]>,\n  );\n}\n\n/**\n * Shuffles an array\n * @param array\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array.sort(() => (Math.random() > 0.5 ? 1 : -1));\n}\n\n/**\n * Returns a range of numbers\n * @param from\n * @param to\n * @param step\n * @returns\n */\nexport function range(from: number, to: number, step = 1): number[] {\n  let rev = false;\n  if (!step) return [];\n  // eslint-disable-next-line no-param-reassign\n  step = Math.round(step);\n  if (from > to) {\n    rev = true;\n    // eslint-disable-next-line no-param-reassign\n    [from, to] = [to, from];\n  }\n\n  if (step < 0) {\n    rev = true;\n    // eslint-disable-next-line no-param-reassign\n    step = Math.abs(step);\n  }\n\n  const amplitude = to - from;\n  if (amplitude < 1 || amplitude < step) return [from];\n\n  if (rev) return [...Array(Math.floor((to - from) / step) + 1)].map((v, i) => from + i * step).reverse();\n  return [...Array(Math.floor((to - from) / step) + 1)].map((v, i) => from + i * step);\n}\n\n/**\n * Generates an array of N numbers in which all elements summed equals to 1\n * @param n\n */\nexport function nArraySum1(n: number): number[] {\n  const rnd = [...Array(n)]\n    .map(() => Math.random());\n\n  const sum = rnd.reduce((val, acc) => val + acc);\n  return rnd.map((val) => val / sum);\n}\n\n/**\n * Filters an array based on another array.\n * Puts elements not found in the sorting array at the end\n */\nexport const sortArrayWithSortingArray = <T extends Primitives>(\n  arr: Array<T>,\n  sortingArray: Array<T>,\n) => {\n  const [\n    includedInSortingIndex,\n    notIncludedInSortingArray,\n  ] = arr.reduce((incl, val) => {\n    if (sortingArray.includes(val)) incl[0].push(val);\n    else incl[1].push(val);\n    return incl;\n  }, [[], []] as [T[], T[]]);\n\n  return [\n    ...includedInSortingIndex.slice().sort((a, b) => {\n      return sortingArray.indexOf(a) - sortingArray.indexOf(b);\n    }),\n    ...notIncludedInSortingArray,\n  ];\n};\n\n/**\n * Transforms an array into a matrix (2D array) with dimensions M(arr.length / cols, cols)\n * @param arr\n * @param cols\n * @returns\n */\nexport function arrayToMatrix<T>(\n  arr: Array<T>,\n  cols: number,\n): T[][] {\n  return arr.reduce((matrix, item, index) => {\n    if (index % cols === 0) {\n      matrix.push([]);\n    }\n    matrix[matrix.length - 1].push(item);\n    return matrix;\n  }, [] as T[][]);\n}\n\n/**\n * Performs the cartesian product of multiple arrays\n * @param a\n * @param more\n * @returns\n */\nexport function* cartesianProduct<T>(a: T[], ...more: T[][]): Generator<T[][], void, any> {\n  if (a == null) return yield [];\n  for (const v of a) {\n    // @ts-ignore\n    for (const c of cartesianProduct(...more)) {\n      // @ts-ignore\n      yield [v, ...c];\n    }\n  }\n}\n\n/**\n * Calculates the average of an array of numbers\n * @param arr\n * @returns\n */\nexport function arrayAverage(...arr: number[]): number {\n  if (!arr.length) return 0;\n  return (arr.reduce((acc, v) => acc + v, 0)) / arr.length;\n}\n\nexport const arraySum = (...arr: number[]): number => {\n  if (!arr.length) return 0;\n  return arr.reduce((acc, val) => acc + val, 0);\n};\n\nexport const arrayTo2D = <T>(arr: Array<T>, size: number) => (\n  arr.reduce((mat, item, i) => {\n    if (i % size === 0) {\n      mat.push([]);\n    }\n    mat[mat.length - 1].push(item);\n    return mat;\n  }, [] as T[][])\n);\n\n/**\n * Generator that yields an array chunked by the size param\n * @param arr\n * @param size\n */\nexport function* windowArray<T>(arr: Array<T>, size: number): Generator<Array<T>> {\n  const lng = arr.length;\n  const iterations = lng - (size - 1);\n  for (const i of Array(iterations).keys()) {\n    yield range(i, i + (size - 1)).map((j) => arr[j]);\n  }\n}\n\n/**\n * Maps through chunks of an array of a given sizencu\n */\nexport function mapChunk <T, const S extends number, R>(arr: T[], callback: (t: T[], i: number) => R, size: S): R[] {\n  return chunk(arr, size).map((c, i) => callback(c, i));\n}\n"]}