{"version":3,"file":"functionUtils.js","sourceRoot":"","sources":["../../../src/Functions/functionUtils.ts"],"names":[],"mappings":";;;AAAO,MAAM,QAAQ,GAAG,CACtB,EAAe,EACf,OAA+B,EACf,EAAE;IAClB,IAAI;QACF,MAAM,GAAG,GAAG,EAAE,EAAE,CAAC;QACjB,OAAO,GAAG,CAAC;KACZ;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;KACvB;AACH,CAAC,CAAC;AAVW,QAAA,QAAQ,YAUnB;AAEK,MAAM,aAAa,GAAG,KAAK,EAChC,EAAwB,EACxB,OAAiD,EACxB,EAAE;IAC3B,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,EAAE,EAAE,CAAC;QACvB,OAAO,GAAG,CAAC;KACZ;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC;QACpC,OAAO,MAAM,CAAC;KACf;AACH,CAAC,CAAC;AAXW,QAAA,aAAa,iBAWxB","sourcesContent":["export const tryCatch = <TData = unknown, TError = unknown>(\n  fn: () => TData,\n  onError: (error: any) => TError,\n): TData | TError => {\n  try {\n    const res = fn();\n    return res;\n  } catch (error) {\n    return onError(error);\n  }\n};\n\nexport const tryCatchAsync = async <TData = unknown, TError = unknown>(\n  fn: () => Promise<TData>,\n  onError: (error: any) => Promise<TError> | TError,\n): Promise<TData | TError> => {\n  try {\n    const res = await fn();\n    return res;\n  } catch (error) {\n    const errRes = await onError(error);\n    return errRes;\n  }\n};\n"]}