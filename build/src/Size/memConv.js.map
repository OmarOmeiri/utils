{"version":3,"file":"memConv.js","sourceRoot":"","sources":["../../../src/Size/memConv.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable arrow-body-style */\n/* eslint-disable require-jsdoc */\nimport assert from 'assert';\nimport { round } from '../Math';\n\ninterface IMemConv {\n  bit: (value: number) => {\n    toBitHr(opts?: {round?: number}): string;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  };\n  B: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toBHr(opts?: {round?: number}): string;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  }\n  KB: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKBHr(opts?: {round?: number}): string;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  };\n  MB: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMBHr(opts?: {round?: number}): string;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  }\n  GB: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGBHr(opts?: {round?: number}): string;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  }\n  TB: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTBHr(opts?: {round?: number}): string;\n    toPB(opts: {hr: true, round?: number}): string;\n    toPB(opts?: {hr?: false, round?: number}): number;\n  }\n  PB: (value: number) => {\n    toBit(opts: {hr: true, round?: number}): string;\n    toBit(opts?: {hr?: false, round?: number}): number;\n    toB(opts: {hr: true, round?: number}): string;\n    toB(opts?: {hr?: false, round?: number}): number;\n    toKB(opts: {hr: true, round?: number}): string;\n    toKB(opts?: {hr?: false, round?: number}): number;\n    toMB(opts: {hr: true, round?: number}): string;\n    toMB(opts?: {hr?: false, round?: number}): number;\n    toGB(opts: {hr: true, round?: number}): string;\n    toGB(opts?: {hr?: false, round?: number}): number;\n    toTB(opts: {hr: true, round?: number}): string;\n    toTB(opts?: {hr?: false, round?: number}): number;\n    toPBHr(opts?: {round?: number}): string;\n  }\n}\nconst bitBase = 8;\nexport const suffixes = {\n  bit: 'b',\n  b: 'B',\n  kb: 'KB',\n  mb: 'MB',\n  gb: 'GB',\n  tb: 'TB',\n  pb: 'PB',\n};\nexport const multipliers = {\n  bit: {\n    toBitHr: 1,\n    toB: 1 / bitBase,\n    toKB: 1 / (bitBase * 1e3),\n    toMB: 1 / (bitBase * 1e6),\n    toGB: 1 / (bitBase * 1e9),\n    toTB: 1 / (bitBase * 1e12),\n    toPB: 1 / (bitBase * 1e15),\n  },\n  B: {\n    toBit: bitBase,\n    toBHr: 1,\n    toKB: 1 / 1e3,\n    toMB: 1 / 1e6,\n    toGB: 1 / 1e9,\n    toTB: 1 / 1e12,\n    toPB: 1 / 1e15,\n  },\n  KB: {\n    toBit: 1 / (bitBase * 1e3),\n    toB: 1e3,\n    toKBHr: 1,\n    toMB: 1 / 1e3,\n    toGB: 1 / 1e6,\n    toTB: 1 / 1e9,\n    toPB: 1 / 1e12,\n  },\n  MB: {\n    toBit: bitBase * 1e6,\n    toB: 1e6,\n    toKB: 1e3,\n    toMBHr: 1,\n    toGB: 1 / 1e3,\n    toTB: 1 / 1e6,\n    toPB: 1 / 1e9,\n  },\n  GB: {\n    toBit: bitBase * 1e9,\n    toB: 1e9,\n    toKB: 1e6,\n    toMB: 1e3,\n    toGBHr: 1,\n    toTB: 1 / 1e3,\n    toPB: 1 / 1e6,\n  },\n  TB: {\n    toBit: bitBase * 1e12,\n    toB: 1e12,\n    toKB: 1e9,\n    toMB: 1e6,\n    toGB: 1e3,\n    toTBHr: 1,\n    toPB: 1 / 1e3,\n  },\n  PB: {\n    toBit: bitBase * 1e15,\n    toB: 1e15,\n    toKB: 1e12,\n    toMB: 1e9,\n    toGB: 1e6,\n    toTB: 1e3,\n    toPBHr: 1,\n  },\n};\n\nfunction conv(\n  value: number,\n  hr: boolean,\n  rnd: number | false,\n  multiplier: number,\n  suffix: string,\n) {\n  let val = value * multiplier;\n  if ((value * multiplier) > Number.MAX_SAFE_INTEGER) {\n    val = Number.MAX_SAFE_INTEGER;\n  }\n  if (val < Number.MIN_VALUE) val = 0;\n  if ((rnd || rnd === 0) && val < Number.MAX_SAFE_INTEGER) {\n    val = round(val, rnd);\n  }\n  if (hr) return `${val}${suffix}`;\n  return val;\n}\n\nexport const MemConv = (function _(): IMemConv {\n  return {\n    bit(value: number) {\n      return {\n        toBitHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.bit.toBitHr,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toB,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toKB,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toMB,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toGB,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toTB,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.bit.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['bit']>;\n    },\n    B(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toBit,\n            suffixes.bit,\n          );\n        },\n        toBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.B.toBHr,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toKB,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toMB,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toGB,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toTB,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.B.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['B']>;\n    },\n    KB(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toBit,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toB,\n            suffixes.b,\n          );\n        },\n        toKBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.KB.toKBHr,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toMB,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toGB,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toTB,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.KB.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['KB']>;\n    },\n    MB(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toBit,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toB,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toKB,\n            suffixes.kb,\n          );\n        },\n        toMBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.MB.toMBHr,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toGB,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toTB,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.MB.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['MB']>;\n    },\n    GB(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toBit,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toB,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toKB,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toMB,\n            suffixes.mb,\n          );\n        },\n        toGBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.GB.toGBHr,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toTB,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.GB.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['GB']>;\n    },\n    TB(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toBit,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toB,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toKB,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toMB,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toGB,\n            suffixes.gb,\n          );\n        },\n        toTBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.TB.toTBHr,\n            suffixes.tb,\n          );\n        },\n        toPB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.TB.toPB,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['TB']>;\n    },\n    PB(value: number) {\n      return {\n        toBit(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toBit,\n            suffixes.bit,\n          );\n        },\n        toB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toB,\n            suffixes.b,\n          );\n        },\n        toKB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toKB,\n            suffixes.kb,\n          );\n        },\n        toMB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toMB,\n            suffixes.mb,\n          );\n        },\n        toGB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toGB,\n            suffixes.gb,\n          );\n        },\n        toTB(opts: {hr?: boolean, round?: number} = {}) {\n          return conv(\n            value,\n            opts.hr || false,\n            opts.round || false,\n            multipliers.PB.toTB,\n            suffixes.tb,\n          );\n        },\n        toPBHr(opts: {round?: number} = {}) {\n          return conv(\n            value,\n            true,\n            opts.round || false,\n            multipliers.TB.toTBHr,\n            suffixes.pb,\n          );\n        },\n      } as ReturnType<IMemConv['PB']>;\n    },\n  };\n}());\n"]}