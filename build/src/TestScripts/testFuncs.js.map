{"version":3,"file":"testFuncs.js","sourceRoot":"","sources":["../../../src/TestScripts/testFuncs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This module contains functions for testing the performance\n * of any complexity script.\n *\n * Contains every time/space complexities.\n * @module testFuncs\n */\n\nimport { getRandomInt } from '../Math/mathFuncs';\n\n/**\n * O(n) function\n *\n * IMPORTANT!!\n *\n * Do not time this function, since it has to generate an array of random numbers before executing.\n * The time of the execution will be returned.\n */\nexport const On = ({\n  size,\n  randomRng = [0, 10000],\n}: {\n  size: number,\n  randomRng?: [number, number],\n}): number => {\n  const rndArr = Array(size).map(() => getRandomInt(randomRng[0], randomRng[1]));\n  const arr: number[] = [];\n  const start = performance.now();\n  for (let i = 0; i < size; i++) {\n    arr.push(rndArr[i]);\n  }\n  const end = performance.now();\n  return end - start;\n};\n\n/**\n * O(log n)  QuickSort function\n *\n * IMPORTANT!!\n *\n * Do not time this function, since it has to generate an array of random numbers before executing.\n * The time of the execution will be returned.\n */\nexport const On2 = ({\n  size,\n  randomRng = [0, 10000],\n}: {\n  size: number,\n  randomRng?: [number, number],\n}): number => {\n  const rndArr = Array(size).map(() => getRandomInt(randomRng[0], randomRng[1]));\n\n  const sort = (array: number[]): number[] => {\n    if (array.length < 2) return array;\n\n    const pivot = array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1, total = array.length; i < total; i++) {\n      if (array[i] < pivot) left.push(array[i]);\n      else right.push(array[i]);\n    }\n    return [\n      ...sort(left),\n      pivot,\n      ...sort(right),\n    ];\n  };\n\n  const start = performance.now();\n  sort(rndArr);\n  const end = performance.now();\n  return end - start;\n};\n\n/**\n * O(n!) Factorial function\n * @returns the execution time\n */\nexport const OnFactorial = (N: number): number => {\n  const factorial = (n: number) => {\n    let num = n;\n\n    if (n === 0) return 1;\n    for (let i = 0; i < n; i++) {\n      num = n * factorial(n - 1);\n    }\n\n    return num;\n  };\n  const start = performance.now();\n  factorial(N);\n  const end = performance.now();\n  return end - start;\n};\n"]}