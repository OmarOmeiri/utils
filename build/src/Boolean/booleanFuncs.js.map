{"version":3,"file":"booleanFuncs.js","sourceRoot":"","sources":["../../../src/Boolean/booleanFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAWH;;;;;;;;;;;;GAYG;AACI,MAAM,gBAAgB,GAAG,CAAa,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAwB,EAAK,EAAE;IACxG,IAAI,MAAM,CAAC;IACX,IAAI,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK;QAAE,OAAO,QAAQ,IAAK,EAAU,CAAC;IAE9D,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,MAAM,CAAC,CAAC;;QAC7D,MAAM,GAAG,KAAK,CAAC;IAEpB,IAAI,WAAW,IAAI,MAAM;QAAE,OAAO,WAAW,CAAC,IAAI,CAAC;IAEnD,IAAI,WAAW,IAAI,CAAC,MAAM;QAAE,OAAO,WAAW,CAAC,KAAK,CAAC;IAErD,IAAI,CAAC,WAAW,IAAI,CAAC,MAAM;QAAE,OAAO,KAAY,CAAC;IAEjD,OAAO,KAAY,CAAC;AACtB,CAAC,CAAC;AAdW,QAAA,gBAAgB,oBAc3B;AAEF;;;;;GAKG;AACI,MAAM,SAAS,GAAG,CACvB,GAAY,EACZ,QAAY,EACC,EAAE;IACf,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,MAAM;YAAE,OAAO,IAAI,CAAC;QACvC,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,OAAO;YAAE,OAAO,KAAK,CAAC;KAC1C;SAAM,IAAI,OAAO,GAAG,KAAK,SAAS;QAAE,OAAO,GAAG,CAAC;IAChD,OAAO,QAAa,CAAC;AACvB,CAAC,CAAC;AATW,QAAA,SAAS,aASpB","sourcesContent":["/**\n * Boolean utility functions\n * @module BooleanUtils\n * @category Boolean\n */\n\nexport interface ITranslateBoolean<T = string> {\n  value: boolean | string | undefined\n  translation?: {\n    true: T,\n    false: T,\n  }\n  fallBack?: boolean | string\n}\n\n/**\n * Translates a boolean value into a user readable string.\n * 'Sim' for true and 'Não' for false, if not translation object was provided.\n * You can customize the translation by providing a translation object like below.\n * @param bool\n * @param translation\n * @example <caption>Example of translation object.</caption>\n * {\n *  true: 'Ativo',\n *  false: 'Desativado',\n * }\n * @returns\n */\nexport const translateBoolean = <T = string>({ value, translation, fallBack }: ITranslateBoolean<T>): T => {\n  let isTrue;\n  if (value !== false && !value) return fallBack ?? ('' as any);\n\n  if (typeof value === 'string') isTrue = (value.trim() === 'true');\n  else isTrue = value;\n\n  if (translation && isTrue) return translation.true;\n\n  if (translation && !isTrue) return translation.false;\n\n  if (!translation && !isTrue) return 'Não' as any;\n\n  return 'Sim' as any;\n};\n\n/**\n * Converts a string to a boolean\n * @param val\n * @param fallback the fallback value in case the string param is not 'true' nor 'false\n * @returns\n */\nexport const toBoolean = <T = undefined>(\n  val: unknown,\n  fallback?: T,\n): T | boolean => {\n  if (typeof val === 'string') {\n    if (val.trim() === 'true') return true;\n    if (val.trim() === 'false') return false;\n  } else if (typeof val === 'boolean') return val;\n  return fallback as T;\n};\n"]}