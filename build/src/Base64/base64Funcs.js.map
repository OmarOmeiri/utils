{"version":3,"file":"base64Funcs.js","sourceRoot":"","sources":["../../../src/Base64/base64Funcs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH;;;;GAIG;AACI,MAAM,cAAc,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAAzG,QAAA,cAAc,kBAA2F;AAE/G,MAAM,UAAU,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAAjE,QAAA,UAAU,cAAuD;AAE9E;;;GAGG;AACH,SAAgB,YAAY,CAAC,MAAc;IACzC,MAAM,WAAW,GAAG,IAAA,sBAAc,EAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACvC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAC9C,UAAU,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC3C;IACD,OAAO,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;AACvD,CAAC;AATD,oCASC","sourcesContent":["/**\n * Base64 utility functions\n * @module Base64Utils\n * @category Base64\n */\n\n/**\n * Returns the contentType of a given base64 string\n * @param base64\n * @returns\n */\nexport const getContentType = (base64: string): string => base64.substring('data:'.length, base64.indexOf(';base64'));\n\nexport const base64Size = (base64: string): number => base64.length * (4 / 3);\n\n/**\n * Convert BASE64 to BLOB\n * @param base64Image Pass Base64 image data to convert into the BLOB\n */\nexport function base64ToBlob(base64: string): Blob {\n  const contentType = getContentType(base64);\n  const parts = base64.split(';base64,');\n  const decodedData = window.atob(parts[1]);\n  const uInt8Array = new Uint8Array(decodedData.length);\n  for (let i = 0; i < decodedData.length; i += 1) {\n    uInt8Array[i] = decodedData.charCodeAt(i);\n  }\n  return new Blob([uInt8Array], { type: contentType });\n}\n"]}