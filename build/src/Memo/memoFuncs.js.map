{"version":3,"file":"memoFuncs.js","sourceRoot":"","sources":["../../../src/Memo/memoFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAIH;;;;;;;;;;;;;;;;GAgBG;AACI,MAAM,OAAO,GAAG,CAAI,EAAyB,EAAiB,EAAE;IACrE,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IACxB,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACpB,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;SAC9B;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC,CAAC;AATW,QAAA,OAAO,WASlB","sourcesContent":["/**\n * Memoize utility functions\n * @module MemoUtils\n * @categori Memo\n */\n\ntype memoReturn<T> = (...args: any[]) => T\n\n/**\n * Memoizes a function result.\n * @param fn function to be memoized\n *\n *\n * USAGE:\n * @example\n * const fibo = memoize((n) => {\n *  if (n === 0) {\n *    return 0;\n *  } else if (n === 1) {\n *    return 1;\n *  } else {\n *    return fibo(n - 2) + fibo(n - 1);\n *  }\n *});\n */\nexport const memoize = <T>(fn: (...args: any[]) => T): memoReturn<T> => {\n  const cache = new Map();\n  return (...args) => {\n    const strX = JSON.stringify(args);\n    if (!cache.has(strX)) {\n      cache.set(strX, fn(...args));\n    }\n    return cache.get(strX);\n  };\n};\n"]}