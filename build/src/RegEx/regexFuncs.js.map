{"version":3,"file":"regexFuncs.js","sourceRoot":"","sources":["../../../src/RegEx/regexFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,4DAGgC;AAEhC,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,qBAAO,CAAA;IACP,qBAAO,CAAA;IACP,qBAAO,CAAA;IACP,uBAAS,CAAA;IACT,uBAAS,CAAA;IACT,uBAAS,CAAA;AACX,CAAC,EAPW,UAAU,0BAAV,UAAU,QAOrB;AAED;;GAEG;AACU,QAAA,aAAa,GAAG,gBAAgB,CAAC;AAEjC,QAAA,wBAAwB,GAAG,qBAAqB,CAAC;AAC9D,6CAA6C;AAChC,QAAA,kBAAkB,GAAG,iFAAiF,CAAC;AAEvG,QAAA,sBAAsB,GAAG,eAAe,CAAC;AAEzC,QAAA,WAAW,GAAG,wJAAwJ,CAAC;AAEvK,QAAA,aAAa,GAAG,8DAA8D,CAAC;AAE/E,QAAA,cAAc,GAAG,UAAU,CAAC;AAE5B,QAAA,aAAa,GAAG,kHAAkH,CAAC;AAEnI,QAAA,QAAQ,GAAG,mDAAmD,CAAC;AAE/D,QAAA,UAAU,GAAG,0FAA0F,CAAC;AAExG,QAAA,UAAU,GAAG,2DAA2D,CAAC;AAE/E,MAAM,WAAW,GAAG,CAAC,OAAsB,MAAM,EAAE,EAAE;IAC1D,QAAQ,IAAI,EAAE;QACZ,KAAK,IAAI;YACP,OAAO,qCAAqC,CAAC;QAC/C;YACE,OAAO,6CAA6C,CAAC;KACxD;AACH,CAAC,CAAC;AAPW,QAAA,WAAW,eAOtB;AAEK,MAAM,oBAAoB,GAAG,CAClC,GAAG,GAAG,GAAG,EACT,aAEI,EAAE,EACE,EAAE;IACV,MAAM,MAAM,GAAG;QACb,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,EAAE,EAAE,KAAK;QACT,EAAE,EAAE,KAAK;QACT,GAAG,UAAU;KACd,CAAC;IAEF,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1C,OAAO,IAAI,MAAM,CAAC,wBAAwB,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC1E,CAAC,CAAC;AAxBW,QAAA,oBAAoB,wBAwB/B;AAEW,QAAA,cAAc,GAAG,kCAAkC,CAAC;AAEpD,QAAA,mBAAmB,GAAG,4PAA4P,CAAC;AAEnR,QAAA,mBAAmB,GAAG,gMAAgM,CAAC;AAEpO;;GAEG;AACI,MAAM,yBAAyB,GAAG,CAAC,EACxC,SAAS,GAAG,CAAC,EACb,SAAS,GAAG,IAAI,EAChB,OAAO,GAAG,IAAI,EACd,OAAO,GAAG,IAAI,EACd,SAAS,EACT,aAAa,MAQX,EAAE,EAAU,EAAE;IAChB,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC;IACjD,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;IACvC,MAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/C,MAAM,EAAE,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC;IAC5C,IAAI,aAAa,KAAK,KAAK,EAAE;QAC3B,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC7B;IACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,SAAS,IAAI,MAAM,GAAG,CAAC,CAAC;AACrD,CAAC,CAAC;AAzBW,QAAA,yBAAyB,6BAyBpC;AAEF;;;;GAIG;AACU,QAAA,cAAc,GAAG,oCAAoC,CAAC;AAEnE;;GAEG;AACU,QAAA,qBAAqB,GAAG,oBAAoB,CAAC;AAE1D;;GAEG;AACU,QAAA,4BAA4B,GAAG,IAAI,MAAM,CAAC,IAAI,IAAA,0CAAwB,GAAE,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;AAE/G;;IAEI;AACJ,6CAA6C;AAChC,QAAA,sBAAsB,GAAG,IAAI,MAAM,CAAC,KAAK,IAAA,kCAAgB,GAAE,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;AAE/G,MAAM,qBAAqB,GAAG,CAAC,OAAe,EAAE,KAAc,EAAU,EAAE,CAAC,IAAI,MAAM,CAAC,OAAO,OAAO,MAAM,EAAE,KAAK,CAAC,CAAC;AAA7G,QAAA,qBAAqB,yBAAwF;AAEnH,MAAM,wBAAwB,GAAG,CAAC,OAAe,EAAE,KAAc,EAAU,EAAE,CAAC,IAAI,MAAM,CAAC,SAAS,OAAO,MAAM,EAAE,KAAK,CAAC,CAAC;AAAlH,QAAA,wBAAwB,4BAA0F;AAExH,MAAM,0BAA0B,GAAG,CAAC,GAAW,EAAU,EAAE,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;AAAhF,QAAA,0BAA0B,8BAAsD;AAE7F;;;;GAIG;AACH,SAAgB,aAAa,CAC3B,GAAW,EACX,IAAiB;IAEjB,OAAO,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC3B,CAAC;AALD,sCAKC;AAED;;;;;;;GAOG;AACH,SAAgB,oBAAoB,CAAC,EACnC,GAAG,EACH,OAAO,EACP,IAAI,GAAG,UAAU,CAAC,CAAC,EACnB,WAAW,GAAG,EAAE,EAChB,IAAI,GAAG,IAAI,GAOZ;IACC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;IAChE,IAAI,IAAI;QAAE,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;IAChC,OAAO,OAAO,CAAC;AACjB,CAAC;AAhBD,oDAgBC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,KAAa;IACzC,OAAO,mBAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC;AAFD,sCAEC;AAED;;;;GAIG;AACH,SAAgB,eAAe,CAAC,GAAW;IACzC,OAAO,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAC7D,CAAC;AAFD,0CAEC;AAED;;;IAGI;AACG,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAkB,EAAE;IAClE,6CAA6C;IAC7C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,sBAAc,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5E,MAAM,IAAI,GAAG,8BAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClD,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IACvB,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5C,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;AACpE,CAAC,CAAC;AAPW,QAAA,gBAAgB,oBAO3B;AAEK,MAAM,cAAc,GAAG,CAAC,GAA+B,EAAE,QAAiB,EAAU,EAAE;IAC3F,IAAI,GAAG,KAAK,WAAW,IAAI,OAAO,GAAG,KAAK,WAAW;QAAE,OAAO,QAAQ,IAAI,CAAC,CAAC;IAC5E,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAC;IACxC,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC;AAC9D,CAAC,CAAC;AAJW,QAAA,cAAc,kBAIzB;AAEF,6CAA6C;AACtC,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,WAAmB,EAAW,EAAE,CAAC,IAAI,MAAM,CAAC,QAAQ,WAAW,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAAjH,QAAA,aAAa,iBAAoG;AAE9H;;;;;GAKG;AACI,MAAM,QAAQ,GAAG,CAAC,MAAc,EAAU,EAAE;IACjD,oEAAoE;IACpE,MAAM,KAAK,GAAG,8FAA8F,CAAC;IAC7G,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACtE,CAAC,CAAC;AAJW,QAAA,QAAQ,YAInB;AAEF;;;;GAIG;AACI,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAU,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AAA9E,QAAA,QAAQ,YAAsE","sourcesContent":["/**\n * RegExp utility functions\n * @module RegExUtils\n * @category RegEx\n */\n\nimport {\n  getProductDescriptionKey,\n  getProductImgKey,\n} from '../AWS/s3UrlGenerators';\n\nexport enum regexFlags {\n  i = 'i',\n  g = 'g',\n  m = 'm',\n  ig = 'ig',\n  im = 'im',\n  gm = 'gm',\n}\n\n/**\n * Validates a MongoDB ObjectID\n */\nexport const objectIdRegex = /^[a-f\\d]{24}$/i;\n\nexport const latinCharsAndDigitsRegex = /[^0-9a-zA-ZÀ-ÿ\\s]+/g;\n// eslint-disable-next-line no-useless-escape\nexport const urlValidationRegex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g;\n\nexport const urlPathValidationRegex = /[a-z0-9/_-]/gi;\n\nexport const EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n\nexport const BASE_64_REGEX = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/;\n\nexport const FILE_EXT_REGEX = /\\.[^.]*$/;\n\nexport const IP_PORT_REGEX = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):[0-9]+$/;\n\nexport const IP_REGEX = /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)(\\.(?!$)|$)){4}$/;\n\nexport const PORT_REGEX = /^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/;\n\nexport const JSON_REGEX = /[{[]{1}([,:{}[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]|\".*?\")+[}\\]]{1}/g;\n\nexport const PHONE_REGEX = (type: 'br' | 'intl' = 'intl') => {\n  switch (type) {\n    case 'br':\n      return /^\\(?[1-9]{2}\\)?[1-9]{1}\\d{4}-?\\d{4}/;\n    default:\n      return /^([+]?\\d{1,2})?\\(?\\d{2,3}\\)?\\d{3,5}-?\\d{4}$/;\n  }\n};\n\nexport const DATE_DDMMMYYYY_REGEX = (\n  sep = '-',\n  monthNames: {\n    [key: number]: string;\n  } = {},\n): RegExp => {\n  const months = {\n    0: 'Jan',\n    1: 'Feb',\n    2: 'Mar',\n    3: 'Apr',\n    4: 'May',\n    5: 'Jun',\n    6: 'Jul',\n    7: 'Aug',\n    8: 'Sep',\n    9: 'Oct',\n    10: 'Nov',\n    11: 'Dec',\n    ...monthNames,\n  };\n\n  const m = Object.values(months).join('|');\n  return new RegExp(`([1-9]|[12]\\\\d|3[01])${sep}(${m})${sep}\\\\d{4}`, 'i');\n};\n\nexport const TIMEHHMM_REGEX = /^(0*[0-9]|1\\d|2[0-4]):([0-5]\\d)$/;\n\nexport const DATE_MMDDYYYY_REGEX = /^((0?[13578]|10|12)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1}))|(0?[2469]|11)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1})))$/;\n\nexport const DATE_DDMMYYYY_REGEX = /^((([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\\/)(0?[13578]|10|12)(-|\\/)(190\\d|19[1-9]\\d|2\\d{3})|(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\\/)(0?[2469]|11)(-|\\/)(190\\d|19[1-9]\\d|2\\d{3}))$/;\n\n/**\n * Validates if a password is safe enough\n */\nexport const PASSWORD_VALIDATION_REGEX = ({\n  minLength = 1,\n  uppercase = true,\n  numbers = true,\n  symbols = true,\n  maxLength,\n  withMinLength,\n}: {\n  minLength?: number,\n  uppercase?: boolean,\n  numbers?: boolean,\n  symbols?: boolean,\n  maxLength?: number,\n  withMinLength?: false,\n} = {}): RegExp => {\n  const sym = symbols ? '(?=.*[@$!%*#?&^_-])' : '';\n  const upp = uppercase ? '(?=.*[A-Z])' : '';\n  const num = numbers ? '(?=.*\\\\d)' : '';\n  const maxLng = maxLength ? `${maxLength}` : '';\n\n  const re = `${num}(?=.*[a-z])${upp}${sym}.`;\n  if (withMinLength === false) {\n    return new RegExp(`${re}+`);\n  }\n  return new RegExp(`${re}{${minLength},${maxLng}}`);\n};\n\n/**\n * Matches anything that starts with\n * @example\n * \"http[s]:// | ftp:// | www[.]\"\n */\nexport const urlPrefixRegex = /^((http[s]?|ftp):\\/?\\/?)|^(www\\.?)/;\n\n/**\n * Matches 24 char hex compatible string (ObjectID)\n */\nexport const objectIdInStringRegex = /\\b([a-f\\d]{24})\\b/g;\n\n/**\n * Match the product description URL\n */\nexport const s3ProductDescriptionUrlRegex = new RegExp(`^${getProductDescriptionKey().replace(/\\//g, '\\\\/')}`);\n\n/**\n  * Match the product description URL\n  */\n// eslint-disable-next-line no-useless-escape\nexport const s3ProductImageUrlRegex = new RegExp(`^(${getProductImgKey().replace(/\\//g, '\\\\/')})(.*?\\/)(products\\/)`);\n\nexport const matchUpToAndIncluding = (pattern: string, flags?: string): RegExp => new RegExp(`(.*?${pattern}.*?)`, flags);\n\nexport const matchUpToAndNotIncluding = (pattern: string, flags?: string): RegExp => new RegExp(`(?:(?!${pattern}).)*`, flags);\n\nexport const matchAllAfterLastOccurence = (str: string): RegExp => new RegExp(`[^${str}]+$`);\n\n/**\n * Returns a RegExp of a given string template literal.\n * @param str template literal pattern. eg.: `[^${someString}]`\n * @param [flag]\n */\nexport function templateRegex(\n  str: string,\n  flag?: regexFlags,\n): RegExp {\n  return RegExp(str, flag);\n}\n\n/**\n * Replaces values in a string from string template literal.\n * @param str string to be modified\n * @param pattern\n * @param [flag]\n * @param [replaceWith]\n * @param [trim] returns a trimmed string if equal to 'true' or not provided.\n */\nexport function templateRegexReplace({\n  str,\n  pattern,\n  flag = regexFlags.g,\n  replaceWith = '',\n  trim = true,\n}:{\n  str: string,\n  pattern: string,\n  flag?: regexFlags,\n  replaceWith?: string,\n  trim?: boolean,\n}): string {\n  const replStr = str.replace(RegExp(pattern, flag), replaceWith);\n  if (trim) return replStr.trim();\n  return replStr;\n}\n\n/**\n * Validates an email address\n * @param email\n * @returns\n */\nexport function validateEmail(email: string): boolean {\n  return EMAIL_REGEX.test(email);\n}\n\n/**\n * Replaces all latin and weird characters\n * @param str\n * @returns\n */\nexport function normalizeString(str: string): string {\n  return str.normalize('NFD').replace(/\\p{Diacritic}/gu, '');\n}\n\n/**\n  * Validates and normalizes an url path\n  * @param urlPath\n  */\nexport const normalizeUrlPath = (urlPath: string): string | false => {\n  // eslint-disable-next-line no-param-reassign\n  urlPath = urlPath.replace(urlPrefixRegex, '').split('/').slice(1).join('/');\n  const test = urlPathValidationRegex.test(urlPath);\n  if (!test) return test;\n  const hasLeadingSlash = /^\\//.test(urlPath);\n  return `${hasLeadingSlash ? '' : '/'}${normalizeString(urlPath)}`;\n};\n\nexport const stringToNumber = (str: string| undefined | number, fallBack?: number): number => {\n  if (str === 'undefined' || typeof str === 'undefined') return fallBack ?? 0;\n  if (typeof str === 'number') return str;\n  return Number(str.replace(/[^0-9.]/g, '')) ?? fallBack ?? 0;\n};\n\n// eslint-disable-next-line no-useless-escape\nexport const notStartsWith = (str: string, notStrtWith: string): boolean => new RegExp(`/^(?!${notStrtWith})\\w+$/`).test(str);\n\n/**\n * Puts a \"-\" before any uppercase character\n * and lowers the case.\n * @param string\n * @returns\n */\nexport const kebabize = (string: string): string => {\n  // uppercase after a non-uppercase or uppercase before non-uppercase\n  const upper = /(?<!\\p{Uppercase_Letter})\\p{Uppercase_Letter}|\\p{Uppercase_Letter}(?!\\p{Uppercase_Letter})/gu;\n  return string.replace(upper, '-$&').replace(/^-/, '').toLowerCase();\n};\n\n/**\n * Replaces any \"-.\" with the capital of the next char\n * @param s\n * @returns\n */\nexport const camelize = (s: string): string => s.replace(/-./g, (x) => x[1].toUpperCase());\n"]}