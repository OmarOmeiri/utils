{"version":3,"file":"miscFuncs.js","sourceRoot":"","sources":["../../../src/Misc/miscFuncs.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AASH;;;;;;;;;;;;;;;;GAgBG;AACI,MAAM,gBAAgB,GAAG,CAC9B,KAAQ,EACR,cAEC,EAAK,EAAE;IACR,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IACzE,IAAI,WAAW;QAAE,OAAO,cAAc,CAAC,WAAW,CAAC,CAAC;IACpD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B;AAEK,MAAM,iBAAiB,GAAG,CAAC,GAAY,EAA2B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,WAAW,CAAC,CAAC;AAA5G,QAAA,iBAAiB,qBAA2F;AAEzH;;;;;;GAMG;AACI,MAAM,OAAO,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,EAAuB,EAAE,IAAI,GAAG,CAAC,EAAQ,EAAE;IAC7F,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE;QACtC,EAAE,CAAC,CAAC,CAAC,CAAC;KACP;AACH,CAAC,CAAC;AAJW,QAAA,OAAO,WAIlB;AAEF;;;;;;;GAOG;AACI,MAAM,UAAU,GAAG,CACxB,GAAQ,EACR,EAA8B,EAC9B,KAAK,GAAG,CAAC,EACT,IAAI,GAAG,CAAC,EACF,EAAE;IACR,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE;QACtC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACf;AACH,CAAC,CAAC;AAVW,QAAA,UAAU,cAUrB","sourcesContent":["/**\n * Miscelaneous utility functions\n * @module MiscUtils\n * @category Misc\n */\n\nexport interface ITranslateDynamic<T = string> {\n  value: T\n  translationObj: {\n    [key: string]: T\n  }\n}\n\n/**\n * Translates a value into a user readable string.\n * @param value\n * @param translationObj\n * @example\n *\n * const val = 'Sim';\n * const translationObj = {\n *   Sim: 'Vai!',\n *  'NÃ£o': 'Tchau!'\n * };\n *\n * dymanicTranslate(val, translationObj) => 'Vai!'\n *\n * dymanicTranslate(val, translationObj) => 'Tchau!'\n *\n */\nexport const dynamicTranslate = <T extends string>(\n  value: T,\n  translationObj: {\n    [key: string]: T\n  }): T => {\n  const translation = Object.keys(translationObj).find((k) => value === k);\n  if (translation) return translationObj[translation];\n  return value;\n};\n\nexport const isNullOrUndefined = (val: unknown): val is null | undefined => (val === null || typeof val === 'undefined');\n\n/**\n * A simple abstraction to avoid writing for loops\n * @param start\n * @param end\n * @param cb\n * @param step\n */\nexport const forLoop = (start: number, end: number, cb: (i: number) => void, step = 1): void => {\n  for (let i = start; i < end; i += step) {\n    cb(i);\n  }\n};\n\n/**\n * A simple abstraction to avoid writing for loops\n * but puts the iteratee in the callback. like a `.map`\n * @param start\n * @param end\n * @param cb\n * @param step\n */\nexport const forLoopMap = <T>(\n  arr: T[],\n  cb: (val:T, i: number) => void,\n  start = 0,\n  step = 1,\n): void => {\n  const lng = arr.length;\n  for (let i = start; i < lng; i += step) {\n    cb(arr[i], i);\n  }\n};\n"]}