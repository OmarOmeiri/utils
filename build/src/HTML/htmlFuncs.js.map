{"version":3,"file":"htmlFuncs.js","sourceRoot":"","sources":["../../../src/HTML/htmlFuncs.ts"],"names":[],"mappings":";;;AAAA,MAAM,OAAO,GAAG,CACd,KAAa,EACb,QAAW,EACuB,EAAE;IACpC,IACE,KAAK,KAAK,IAAI;WACX,QAAQ,IAAI,KAAK,EACpB;QACA,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,KAAc;IAC1C,IAAI,KAAK,YAAY,WAAW;QAAE,OAAO,IAAI,CAAC;IAE9C,OAAO,CAAC,CAAC,CACP,KAAK;WACF,OAAO,KAAK,KAAK,QAAQ;WACzB,KAAK,KAAK,IAAI;WACd,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC;WAC1B,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC;WAC1B,KAAK,CAAC,QAAQ,KAAK,CAAC;WACpB,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ,CACtC,CAAC;AACJ,CAAC;AAZD,sCAYC","sourcesContent":["const hasProp = <V extends object, P extends string>(\n  value: object,\n  property: P,\n): value is V & {[K in P]: unknown} => {\n  if (\n    value !== null\n    && property in value\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Check if a value is an HTML element\n * @param value\n * @param view\n * @returns\n */\nexport function isHtmlElement(value: unknown): value is HTMLElement {\n  if (value instanceof HTMLElement) return true;\n\n  return !!(\n    value\n    && typeof value === 'object'\n    && value !== null\n    && hasProp(value, 'nodeType')\n    && hasProp(value, 'nodeName')\n    && value.nodeType === 1\n    && typeof value.nodeName === 'string'\n  );\n}\n"]}