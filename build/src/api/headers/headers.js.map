{"version":3,"file":"headers.js","sourceRoot":"","sources":["../../../../src/api/headers/headers.ts"],"names":[],"mappings":";;AAIA,MAAM,OAAO;IACJ,OAAO,GAAa,EAAS,CAAC;IAErC,YAAY,IAAe;QACzB,IAAI,CAAC,IAAI,EAAE,MAAM;YAAE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,gBAAgB,CAAC;QAE1D,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACpC,MAAM,GAAG,GAAG,CAA8B,CAAC;YAC3C,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC;gBAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAA2B,GAAM,EAAE,KAAkB;QACtD,aAAa;QACb,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAY,CAAC;IAC5F,CAAC;IAED,QAAQ,CAAC,KAA4C;QACnD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC7C,IAAI,CAAC,GAAG,CAAC,GAA8D,EAAE,KAAK,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,MAAM,CAA2B,YAAiB;QAChD,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM;aACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;aACrB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAQ,CAAC,CAAC,CACvD,CAAC;IACJ,CAAC;IAED,GAAG,CAA2B,GAAM;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,QAAQ,CAAC,IAAwB;QAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC;CACF;AACD,kBAAe,OAAO,CAAC","sourcesContent":["import { CustomHeadersPre } from 'lullo-common-types';\n\nexport type IHeaders = FixedIncomingHttpHeaders & Partial<CustomHeadersPre>;\n\nclass Headers {\n  public headers: IHeaders = {} as any;\n\n  constructor(head?: IHeaders) {\n    if (!head?.origin) this.headers.origin = '127.0.0.1:3000';\n\n    Object.keys(head ?? []).forEach((h) => {\n      const key = h as unknown as keyof IHeaders;\n      if (head?.[key]) (this.headers[key] as any) = head[key];\n    });\n  }\n\n  set<K extends keyof IHeaders>(key: K, value: IHeaders[K]): void {\n    // @ts-ignore\n    this.headers[key] = typeof value === 'string' ? value : (JSON.stringify(value) as string);\n  }\n\n  setMulti(heads: {[K in keyof IHeaders]?: IHeaders[K]}): void {\n    Object.entries(heads).forEach(([key, value]) => {\n      this.set(key as keyof CustomHeadersPre | keyof FixedIncomingHttpHeaders, value);\n    });\n  }\n\n  get(): IHeaders {\n    return this.headers;\n  }\n\n  filter<K extends keyof IHeaders>(keysToFilter: K[]): IHeaders {\n    return Object.fromEntries(\n      Object\n        .entries(this.headers)\n        .filter(([key]) => !keysToFilter.includes(key as K)),\n    );\n  }\n\n  del<K extends keyof IHeaders>(key: K): void {\n    delete this.headers[key];\n  }\n\n  delMulti(keys: (keyof IHeaders)[]): void {\n    keys.forEach((key) => this.del(key));\n  }\n}\nexport default Headers;\n"]}