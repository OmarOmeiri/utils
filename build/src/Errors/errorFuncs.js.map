{"version":3,"file":"errorFuncs.js","sourceRoot":"","sources":["../../../src/Errors/errorFuncs.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,SAAgB,eAAe,CAC7B,CAAQ,EACR,OAEC;IAED,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACzD,IAAI,CAAC,OAAO;QAAE,OAAO,KAAK,CAAC;IAC3B,IAAI,OAAO,CAAC,QAAQ;QAAE,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;IACtG,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,0CAUC;AA6BD,yCAAyC;AACzC,SAAgB,gBAAgB,CAC9B,KAAc,EACd,IAAU,EACV,EAAM;IAEN,IAAI,IAAI,EAAE;QACR,IACE,OAAO,KAAK,KAAK,QAAQ;eACrB,KAAK,KAAK,IAAI;eACd,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC;eACxB,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAC7B;YACA,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;aACb;SACF;KACF;IACD,IACE,OAAO,KAAK,KAAK,QAAQ;WACrB,KAAK,KAAK,IAAI;WACd,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC;WACxB,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAC7B;QACA,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AA1BD,4CA0BC","sourcesContent":["/**\n * Returns informations about the error\n * @param e\n * @param options\n */\nexport function superStackTrace(\n  e: Error,\n  options?: {\n    onlyPath?: boolean\n  },\n): string[] {\n  let stack = (e.stack?.toString() ?? '').split(/\\r\\n|\\n/);\n  if (!options) return stack;\n  if (options.onlyPath) stack = stack.map((s) => (s.match(/\\(.*?\\)/)?.[0] ?? '').replace(/\\(|\\)/g, ''));\n  return stack;\n}\n\ntype ErrKeysTp<T> =\nT extends undefined\n? unknown\n: T extends 'unknown'\n? unknown\n: T extends 'any'\n? any\n: unknown\n\n/**\n * Checks if an error is an object with indexable keys.\n *\n * OBS:\n * The third parameter is just a workaround to set the types of the properties.\n * @param error\n * @returns\n */\nexport function objectErrorGuard<K extends string, T extends 'any' | 'unknown' | undefined>(\n  error: unknown,\n  keys: K[],\n  _t?: T,\n): error is ({[key in K]: ErrKeysTp<T>} & {[key: string]: ErrKeysTp<T>})\nexport function objectErrorGuard<K extends string, T extends 'any' | 'unknown' | undefined>(\n  error: unknown,\n  keys?: K[],\n  _t?: T,\n): error is ({[key: string]: ErrKeysTp<T>})\n// eslint-disable-next-line require-jsdoc\nexport function objectErrorGuard<K extends string, T extends 'any' | 'unknown' | undefined>(\n  error: unknown,\n  keys?: K[],\n  _t?: T,\n): error is {[key: string]: ErrKeysTp<T>} | ({[key in K]: ErrKeysTp<T>} & {[key: string]: ErrKeysTp<T>}) {\n  if (keys) {\n    if (\n      typeof error === 'object'\n       && error !== null\n       && !(error instanceof Date)\n       && !(error instanceof Array)\n    ) {\n      if (keys.every((key) => key in error)) {\n        return true;\n      }\n    }\n  }\n  if (\n    typeof error === 'object'\n     && error !== null\n     && !(error instanceof Date)\n     && !(error instanceof Array)\n  ) {\n    return true;\n  }\n  return false;\n}\n"]}