{"version":3,"file":"s3UrlGenerators.js","sourceRoot":"","sources":["../../../src/AWS/s3UrlGenerators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * S3 URL generate functions\n * @module S3UrlGen\n * @category AWS\n */\n\n/* eslint-disable no-param-reassign */\nimport uniqid from 'uniqid';\n\n/**\n * Gets a S3 product description url\n * @param [storeId]\n * @param [productId]\n * @returns\n */\nexport const getProductImgKey = (storeId?: string, productId = ''): string => (!storeId ? 'Public/products/images/' : `Public/products/images/${storeId}/${productId ? `${productId}/` : ''}`);\n\n/**\n * Gets a S3 product image Key\n * @param [storeId]\n * @param [productId]\n * @returns\n */\nexport const getProductDescriptionKey = (storeId?: string, productId = ''): string => (!storeId ? 'Public/products/description/' : `Public/products/description/${storeId}/${productId ? `${productId}/` : ''}`);\n\n/**\n * Gets a S3 store banners url\n * @param [storeId]\n * @param [productId]\n * @returns\n */\nexport const getBannersKey = (storeId?: string, bannerId = ''): string => (!storeId ? 'Public/images/' : `Public/images/${storeId}/banners/${bannerId ? `${bannerId}/` : ''}`);\n\n/**\n * Gets an icon key\n * @param name\n */\nexport const getPlatformIconKey = (fileName: string): string => `Public/icons/${fileName}`;\n\n/**\n * Gets a store log key by fileName\n * @param name\n */\nexport const getStoreLogoKey = (fileName: string, storeId: string): string => `Public/images/${storeId}/logo/${fileName}`;\n\nexport const getS3UrlByKey = ({\n  bucketUrl,\n  Key,\n}: {\n  bucketUrl: string,\n  Key: string,\n}): string => (/^\\//.test(Key) ? `${bucketUrl}${Key}` : `${bucketUrl}/${Key}`);\n\nexport const getS3ProductImgUrlByKey = ({\n  bucketUrl,\n  Key,\n  thumbnail = false,\n}: {\n  bucketUrl: string,\n  Key: string,\n  thumbnail?: boolean,\n}): string => {\n  let key = Key;\n  if (thumbnail) {\n    const split = key.split('/');\n    split.splice(-1, 0, 'thumbnails');\n    key = split.join('/');\n  }\n  return /^\\//.test(Key) ? `${bucketUrl}${key}` : `${bucketUrl}/${key}`;\n};\n\n/**\n * Generates a product image url\n * @param storeId\n * @param productId\n * @param\n * @returns\n */\nexport const genProductImageKey = ({\n  storeId,\n  productId,\n  fileExt,\n}: {\n  storeId: string,\n  productId: string,\n  fileExt: string,\n}): string => (`${getProductImgKey(storeId, productId)}${uniqid()}.${fileExt}`);\n\n/**\n * Transforms a product image URL to the thumbnail URL\n * @param str\n * @returns\n */\nexport const imgUrlToThumbnail = (str: string): string => {\n  const endsWithSlash = /\\/$/.test(str);\n  if (endsWithSlash) {\n    str = str.slice(0, -1);\n  }\n  const ix = str.lastIndexOf('/') + 1;\n  const strArr = str.split('');\n  strArr.splice(ix, 0, 'thumbnails/');\n  return strArr.join('');\n};\n\nexport const sampleProdImgs = (awsBucketUrl: string): {url: string, alt: string}[] => [\n  { url: `${awsBucketUrl}/Public/images/platform/sampleProducts/sampleProduct.png`, alt: 'sample product 1' },\n  { url: `${awsBucketUrl}/Public/images/platform/sampleProducts/sampleProduct2.png`, alt: 'sample product 1' },\n];\n\nexport const sampleBannerImgs = (awsBucketUrl: string): {url: string, alt: string}[] => [\n  { url: `${awsBucketUrl}/Public/images/platform/sampleBanners/banner1.png`, alt: 'sample banner 1' },\n  { url: `${awsBucketUrl}/Public/images/platform/sampleBanners/banner2.png`, alt: 'sample banner 2' },\n  { url: `${awsBucketUrl}/Public/images/platform/sampleBanners/banner2.png`, alt: 'sample banner 3' },\n];\n\n/**\n * Generates a product description HTML file url\n * @param storeId\n * @param productId\n * @param\n * @returns\n */\nexport const genProductDescriptionKey = ({\n  storeId,\n  productId,\n}: {\n  storeId: string,\n  productId: string,\n}): string => (`${getProductDescriptionKey(storeId, productId)}${uniqid()}.html`);\n"]}