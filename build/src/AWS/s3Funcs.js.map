{"version":3,"file":"s3Funcs.js","sourceRoot":"","sources":["../../../src/AWS/s3Funcs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable prefer-promise-reject-errors */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Exports all functions related to AWS S3.\n * @module S3Utils\n * @category AWS\n */\nimport {\n  S3Client,\n  CreateBucketCommand,\n  DeleteBucketCommand,\n  DeleteObjectCommand,\n  GetObjectCommand,\n  GetBucketAclCommand,\n  GetBucketWebsiteCommand,\n  ListObjectsV2Command,\n  PutBucketAclCommand,\n  PutBucketWebsiteCommand,\n  PutObjectCommand,\n  HeadObjectCommand,\n  S3ClientConfig,\n  PutObjectCommandInput,\n  paginateListObjectsV2,\n} from '@aws-sdk/client-s3';\nimport type {\n  ObjectCannedACL,\n  CreateBucketOutput,\n  DeleteBucketCommandOutput,\n  GetObjectCommandOutput,\n  DeleteObjectCommandOutput,\n  GetBucketAclOutput,\n  GetBucketWebsiteOutput,\n  ListObjectsV2Output,\n  HeadObjectCommandOutput,\n  PutBucketAclCommandOutput,\n  PutBucketWebsiteCommandOutput,\n  PutObjectOutput,\n  PutObjectRequest,\n} from '@aws-sdk/client-s3';\n\nexport type {\n  ObjectCannedACL,\n  CreateBucketOutput,\n  DeleteBucketCommandOutput,\n  GetObjectCommandOutput,\n  DeleteObjectCommandOutput,\n  GetBucketAclOutput,\n  GetBucketWebsiteOutput,\n  ListObjectsV2Output,\n  HeadObjectCommandOutput,\n  PutBucketAclCommandOutput,\n  PutBucketWebsiteCommandOutput,\n  PutObjectOutput,\n  PutObjectRequest,\n  PutObjectCommandInput,\n};\n\nconst startWithSlashRegex = /^\\//;\nconst endsWithSlashRegex = /\\/$/;\n\n/**\n * Gets the current method name\n * @param obj\n * @returns\n */\nfunction getName(obj: any): string {\n  if (obj.name) {\n    return obj.name;\n  }\n\n  let funcNameRegex = /function (.{1,})\\(/;\n  let results = (funcNameRegex).exec(obj.toString());\n  let result = results && results.length > 1 && results[1];\n\n  // Check to see custom implementation\n  if (!result) {\n    funcNameRegex = /return _this.(.*);/;\n    results = (funcNameRegex).exec(obj.toString());\n    result = results && results.length > 1 && results[1];\n  }\n  return result || '';\n}\n\nconst checkPrefix = (Prefix: string) => {\n  if (startWithSlashRegex.test(Prefix)) {\n    return `${Prefix.replace(/^\\//, '')}`;\n  }\n  if (!endsWithSlashRegex.test(Prefix)) {\n    return `${Prefix}/`;\n  }\n  return Prefix;\n};\n\ntype Logger<T = undefined> = (args: {\n  message: string\n  status?: number\n  extra: T & {\n    method: string\n  }\n}) => void\n\nexport class AWSS3Utils {\n  private s3: S3Client;\n\n  constructor({\n    awsS3Region,\n    awsS3Id,\n    awsS3Secret,\n  }: {\n    awsS3Region: string,\n    awsS3Id: string,\n    awsS3Secret: string,\n  }) {\n    this.s3 = new S3Client({\n      region: awsS3Region,\n      credentials: {\n        accessKeyId: awsS3Id,\n        secretAccessKey: awsS3Secret,\n      },\n    });\n  }\n\n  close(): void {\n    this.s3.destroy();\n    // @ts-ignore\n    delete this.s3;\n  }\n\n  /**\n   * Creates an S3 bucket\n   * @param {String} bucket bucket name eg: lullo\n   */\n  async createBucket(\n    bucketName: string,\n    logger: Logger<{\n      name: string\n      Location?: string,\n    }> = () => {},\n  ): Promise<CreateBucketOutput> {\n    const params = {\n      Bucket: bucketName,\n    };\n    const output = await this.s3.send(new CreateBucketCommand(params));\n\n    logger({\n      message: 'Bucket created.',\n      status: output?.$metadata?.httpStatusCode,\n      extra: {\n        name: bucketName,\n        Location: output.Location,\n        method: getName(this.createBucket),\n      },\n    });\n    return output;\n  }\n\n  /**\n  * Deletes an S3 bucket\n  * @param {String} bucket bucket name eg: lullo\n  */\n  async deleteBucket(\n    bucketName: string,\n    logger: Logger<{\n      name: string\n    }> = () => {},\n  ): Promise<DeleteBucketCommandOutput> {\n    const params = {\n      Bucket: bucketName,\n    };\n    const res = await this.s3.send(new DeleteBucketCommand(params));\n\n    logger({\n      message: 'Bucket deleted.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        name: bucketName,\n        method: getName(this.deleteBucket),\n      },\n    });\n    return res;\n  }\n\n  /**\n  * Deletes files in S3 bucket\n  * @param {String} bucket bucket name eg: lullo\n  * @param {Array} files an array of paths\n  */\n  async s3DeleteFiles({\n    bucket,\n    files,\n    logger = () => {},\n  }: {\n    bucket: string,\n    files: string[],\n    logger?: Logger<{\n      name: string\n      deletedFiles: string[];\n      failedFiles: {\n          name: string;\n          error: any;\n      }[];\n    }>\n  }) : Promise<{\n    deletedFiles: {\n        name: string;\n        res: DeleteObjectCommandOutput;\n    }[];\n    failedFiles: {\n        name: string;\n        error: any;\n    }[];\n  }> {\n    const promise = files.map(async (file) => new Promise<{\n      file: string,\n      res: DeleteObjectCommandOutput\n    }>((resolve, reject) => {\n      (async () => {\n        try {\n          const params = {\n            Bucket: bucket,\n            Key: file,\n          };\n          const res = await this.s3.send(new DeleteObjectCommand(params));\n          resolve({\n            res,\n            file,\n          });\n        } catch (error) {\n          reject({\n            file,\n            error,\n          });\n        }\n      })();\n    }));\n\n    const res = await Promise.allSettled(promise);\n\n    const filesResponse = res.reduce((obj, f) => {\n      if (f.status === 'fulfilled') {\n        return {\n          ...obj,\n          deletedFiles: [\n            ...obj.deletedFiles,\n            {\n              name: f.value.file,\n              res: f.value.res,\n            },\n          ],\n        };\n      }\n\n      const reason = f.reason as {\n        file: string,\n        error: any\n      };\n\n      return {\n        ...obj,\n        failedFiles: [\n          ...obj.failedFiles,\n          {\n            name: reason.file,\n            error: reason.error,\n          },\n        ],\n      };\n    }, {\n      deletedFiles: [],\n      failedFiles: [],\n    } as {\n      deletedFiles: {\n        name: string,\n        res: DeleteObjectCommandOutput,\n      }[],\n      failedFiles: {\n        name: string,\n        error: any,\n      }[]\n    });\n\n    logger({\n      message: 'Files Deleted.',\n      extra: {\n        name: bucket,\n        deletedFiles: filesResponse.deletedFiles.map((f) => f.name),\n        failedFiles: filesResponse.failedFiles,\n        method: getName(this.s3DeleteFiles),\n      },\n    });\n    return filesResponse;\n  }\n\n  /**\n  * Downloads files in S3 bucket\n  * @param {String} bucket bucket name eg: lullo\n  * @param {Array} files an array of paths\n  */\n  async s3Download({\n    bucket,\n    files,\n    logger = () => {},\n  }: {\n    bucket: string,\n    files: string[],\n    logger?: Logger<{\n      name: string\n      downloadedFiles: string[];\n      failedFiles: {\n          name: string;\n          error: any;\n      }[];\n    }>\n  }): Promise<{\n    downloadedFiles: {\n        name: string;\n        res: GetObjectCommandOutput;\n    }[];\n    failedFiles: {\n        name: string;\n        error: any;\n    }[];\n  }> {\n    const promise = files.map(async (file) => new Promise<{\n      file: string,\n      res: GetObjectCommandOutput\n    }>((resolve, reject) => {\n      (async () => {\n        try {\n          const params = {\n            Bucket: bucket,\n            Key: file,\n          };\n\n          const res = await this.s3.send(new GetObjectCommand(params));\n          resolve({\n            res,\n            file,\n          });\n        } catch (error) {\n          reject({\n            file,\n            error,\n          });\n        }\n      })();\n    }));\n\n    const res = await Promise.allSettled(promise);\n\n    const filesResponse = res.reduce((obj, f) => {\n      if (f.status === 'fulfilled') {\n        return {\n          ...obj,\n          downloadedFiles: [\n            ...obj.downloadedFiles,\n            {\n              name: f.value.file,\n              res: f.value.res,\n            },\n          ],\n        };\n      }\n\n      const reason = f.reason as {\n        file: string,\n        error: any\n      };\n\n      return {\n        ...obj,\n        failedFiles: [\n          ...obj.failedFiles,\n          {\n            name: reason.file,\n            error: reason.error,\n          },\n        ],\n      };\n    }, {\n      downloadedFiles: [],\n      failedFiles: [],\n    } as {\n      downloadedFiles: {\n        name: string,\n        res: GetObjectCommandOutput,\n      }[],\n      failedFiles: {\n        name: string,\n        error: any,\n      }[]\n    });\n\n    logger({\n      message: 'Files downloaded.',\n      extra: {\n        name: bucket,\n        downloadedFiles: filesResponse.downloadedFiles.map((f) => f.name),\n        failedFiles: filesResponse.failedFiles,\n        method: getName(this.s3Download),\n      },\n    });\n    return filesResponse;\n  }\n\n  /**\n  * Gets S3 bucket ACL policy\n  * @param {String} bucket bucket name eg: lullo\n  */\n  async getBucketAcl(\n    bucketName: string,\n    logger: Logger<{\n      bucket: string\n    }> = () => {},\n  ): Promise<GetBucketAclOutput> {\n    const params = {\n      Bucket: bucketName,\n    };\n    const res = await this.s3.send(new GetBucketAclCommand(params));\n    logger({\n      message: 'Fetched bucket ACL.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket: bucketName,\n        method: getName(this.getBucketAcl),\n      },\n    });\n    return res;\n  }\n\n  /**\n  * Returns the website configuration for a bucket. To host website on Amazon S3, you can configure a bucket as website by adding a website configuration.\n  * @param {String} bucket bucket name eg: lullo\n  */\n  async getBucketWebsite(\n    bucketName: string,\n    logger: Logger<{\n      bucket: string\n    }> = () => {},\n  ): Promise<GetBucketWebsiteOutput> {\n    const params = {\n      Bucket: bucketName,\n    };\n    const res = await this.s3.send(new GetBucketWebsiteCommand(params));\n\n    logger({\n      message: 'Fetched bucket website config.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket: bucketName,\n        method: getName(this.getBucketWebsite),\n      },\n    });\n    return res;\n  }\n\n  /**\n  * Lists a directory in S3 bucket\n  * @param {*} bucket bucket name eg: lullo\n  * @param {*} prefix path\n  */\n  async s3ListObjects(\n    bucket: string,\n    prefix: string,\n    logger: Logger<{\n      bucket: string,\n      prefix: string\n    }> = () => {},\n  ): Promise<{\n    files: string[],\n    dirs: string[]\n  }> {\n    const params = {\n      Bucket: bucket,\n      Prefix: checkPrefix(prefix),\n      Delimiter: '/',\n    };\n\n    const data: {\n      files: string[],\n      dirs: string[]\n    } = {\n      files: [],\n      dirs: [],\n    };\n    for await (const res of paginateListObjectsV2({\n      client: this.s3,\n    }, params)) {\n      if (Number(res?.$metadata?.httpStatusCode) !== 200) {\n        logger({\n          message: `Request to list S3 directory failed with status ${res.$metadata.httpStatusCode}`,\n          status: res?.$metadata?.httpStatusCode,\n          extra: {\n            bucket,\n            prefix,\n            method: getName(this.s3ListObjects),\n          },\n        });\n        continue;\n      }\n\n      const files = (res.Contents ?? [])\n        .filter((i) => i.Key && i.Key !== params.Prefix)\n        .map((i) => i.Key as string);\n\n      const directories = (res.CommonPrefixes ?? [])\n        .filter((i) => i.Prefix)\n        .map((i) => i.Prefix) as string[];\n\n      data.files.push(...files);\n      data.dirs.push(...directories);\n    }\n\n    logger({\n      message: 'Listed objects for bucket',\n      extra: {\n        bucket,\n        prefix,\n        method: getName(this.s3ListObjects),\n      },\n    });\n    return data;\n  }\n\n  /**\n   * Gets object info\n   * @param bucket\n   * @param Key\n   * @returns\n   */\n  async getObjHead(\n    bucket: string,\n    Key: string,\n    logger: Logger<{\n      bucket: string,\n      Key: string\n    }> = () => {},\n  ): Promise<HeadObjectCommandOutput> {\n    const params = {\n      Bucket: bucket,\n      Key,\n      Delimiter: '/',\n    };\n    const res = await this.s3.send(new HeadObjectCommand(params));\n\n    logger({\n      message: 'Fetched object head.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket,\n        Key,\n        method: getName(this.getObjHead),\n      },\n    });\n    return res;\n  }\n\n  /**\n   * Checks if an object exists\n   * @param bucket\n   * @param Key\n   * @returns\n   */\n  async objExists(\n    bucket: string,\n    Key: string,\n    logger: Logger<{\n      bucket: string,\n      Key: string,\n      exists: boolean\n    }> = () => {},\n  ): Promise<boolean> {\n    try {\n      const res = await this.getObjHead(bucket, Key);\n      logger({\n        message: 'Checked if object exists.',\n        status: res?.$metadata?.httpStatusCode,\n        extra: {\n          bucket,\n          Key,\n          method: getName(this.objExists),\n          exists: true,\n        },\n      });\n      return true;\n    } catch (error) {\n      logger({\n        message: 'Checked if object exists.',\n        status: error?.$metadata?.httpStatusCode,\n        extra: {\n          bucket,\n          Key,\n          method: getName(this.objExists),\n          exists: false,\n        },\n      });\n\n      if (error.name === 'NotFound' || error.$response === 404) {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n * Sets a bucket policy\n * @param {*} bucket bucket name eg: lull\n */\n  async putBucketAcl({\n    bucket,\n    WebsiteConfiguration: {\n      RedirectAllRequestsTo: {\n        HostName,\n        Protocol,\n      },\n    },\n    logger = () => {},\n  }: {\n    bucket: string,\n    WebsiteConfiguration: {\n      RedirectAllRequestsTo: {\n        HostName: string,\n        Protocol: string,\n      },\n    },\n    logger?: Logger<{\n      bucket: string,\n      WebsiteConfiguration: {\n        RedirectAllRequestsTo: {\n          HostName: string,\n          Protocol: string,\n        },\n      }\n    }>\n  }): Promise<PutBucketAclCommandOutput> {\n    const staticHostParams = {\n      Bucket: bucket,\n      WebsiteConfiguration: {\n        RedirectAllRequestsTo: {\n          HostName,\n          Protocol,\n        },\n      },\n    };\n    const res = await this.s3.send(new PutBucketAclCommand(staticHostParams));\n\n    logger({\n      message: 'Updated bucket ACL.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket,\n        WebsiteConfiguration: {\n          RedirectAllRequestsTo: {\n            HostName,\n            Protocol,\n          },\n        },\n        method: getName(this.putBucketAcl),\n      },\n    });\n    return res;\n  }\n\n  /**\n  * Sets a bucket policy\n  * @param {*} bucket bucket name eg: lull\n  */\n  async putBucketWebsite({\n    bucket,\n    WebsiteConfiguration: {\n      RedirectAllRequestsTo: {\n        HostName,\n        Protocol,\n      },\n    },\n    logger = () => {},\n  }: {\n    bucket: string,\n    WebsiteConfiguration: {\n      RedirectAllRequestsTo: {\n        HostName: string,\n        Protocol: string,\n      },\n    },\n    logger?: Logger<{\n      bucket: string,\n      WebsiteConfiguration: {\n        RedirectAllRequestsTo: {\n          HostName: string,\n          Protocol: string,\n        },\n      }\n    }>\n  }):Promise<PutBucketWebsiteCommandOutput> {\n    const staticHostParams = {\n      Bucket: bucket,\n      WebsiteConfiguration: {\n        RedirectAllRequestsTo: {\n          HostName,\n          Protocol,\n        },\n      },\n    };\n\n    const res = await this.s3.send(new PutBucketWebsiteCommand(staticHostParams));\n\n    logger({\n      message: 'Updated bucket website ACL.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket,\n        WebsiteConfiguration: {\n          RedirectAllRequestsTo: {\n            HostName,\n            Protocol,\n          },\n        },\n        method: getName(this.putBucketWebsite),\n      },\n    });\n\n    return res;\n  }\n\n  /**\n  * Writes multiple files to S3\n  * @param {String} bucket bucket name eg: lullo\n  * @param {Array} files an array of objects containing keys {data: , path:, ContentType:, ACL: }\n  */\n  async s3UploadMulti({\n    bucket,\n    files,\n    logger = () => {},\n  }: {\n    bucket: string,\n    files:{\n      data: PutObjectRequest['Body'],\n      path: string,\n      ContentType: string,\n      ACL?: ObjectCannedACL,\n    }[],\n    logger?: Logger<{\n      bucket: string,\n      uploadedFiles: string[],\n      failedFiles: string[]\n    }>\n  }): Promise<{\n    uploadedFiles: {\n        Key: string;\n        res: PutObjectOutput;\n    }[];\n    failedFiles: {\n        Key: string;\n        error: any;\n    }[];\n}> {\n    const promise = files.map(async (file) => new Promise<{\n      res: PutObjectOutput\n      Key: string,\n      ContentType: string,\n      ACL?: ObjectCannedACL,\n    }>((resolve, reject) => {\n      (async () => {\n        try {\n          const paramsWrite: PutObjectRequest = {\n            Bucket: bucket,\n            Key: file.path,\n            Body: file.data,\n            ContentType: file.ContentType,\n            ACL: file.ACL,\n          };\n\n          const res = await this.s3.send(new PutObjectCommand(paramsWrite));\n\n          resolve({\n            res,\n            Key: file.path,\n            ContentType: file.ContentType,\n            ACL: file.ACL,\n          });\n        } catch (error) {\n          reject({\n            Key: file.path,\n            ContentType: file.ContentType,\n            ACL: file.ACL,\n            error,\n          });\n        }\n      })();\n    }));\n\n    const res = await Promise.allSettled(promise);\n\n    const filesResponse = res.reduce((obj, f) => {\n      if (f.status === 'fulfilled') {\n        return {\n          ...obj,\n          uploadedFiles: [\n            ...obj.uploadedFiles,\n            {\n              Key: f.value.Key,\n              res: f.value.res,\n            },\n          ],\n        };\n      }\n\n      const reason = f.reason as {\n        Key: string,\n        ContentType: string,\n        ACL: ObjectCannedACL,\n        error: any,\n      };\n\n      return {\n        ...obj,\n        failedFiles: [\n          ...obj.failedFiles,\n          {\n            Key: reason.Key,\n            error: reason.error,\n          },\n        ],\n      };\n    }, {\n      uploadedFiles: [],\n      failedFiles: [],\n    } as {\n      uploadedFiles: {\n        Key: string,\n        res: PutObjectOutput,\n      }[],\n      failedFiles: {\n        Key: string,\n        error: any,\n      }[]\n    });\n\n    logger({\n      message: 'Multiple files uploaded.',\n      extra: {\n        bucket,\n        uploadedFiles: filesResponse.uploadedFiles.map((f) => f.Key),\n        failedFiles: filesResponse.failedFiles.map((f) => f.Key),\n        method: getName(this.s3UploadMulti),\n      },\n    });\n\n    return filesResponse;\n  }\n  /**\n  * Writes a single files to S3\n  * @param {String} bucket bucket name eg: lullo\n  * @param {Array} file an objects containing keys {data: , path:, ContentType:, ACL: }\n  */\n  async uploadFile({\n    bucket,\n    file,\n    logger = () => {},\n  }: {\n    bucket: string,\n    file: {\n      data: PutObjectRequest['Body'] | string | Uint8Array | Buffer,\n      path: string,\n      ContentType: string,\n      ACL?: ObjectCannedACL,\n    },\n    logger?: Logger<{\n      bucket: string,\n      Key: string\n    }>\n  }): Promise<PutObjectOutput> {\n    const paramsWrite: PutObjectCommandInput = {\n      Bucket: bucket,\n      Key: file.path,\n      Body: file.data,\n      ContentType: file.ContentType,\n      ACL: file.ACL,\n    };\n\n    const res = await this.s3.send(new PutObjectCommand(paramsWrite));\n    logger({\n      message: 'File uploaded.',\n      status: res?.$metadata?.httpStatusCode,\n      extra: {\n        bucket,\n        Key: file.path,\n        method: getName(this.uploadFile),\n      },\n    });\n\n    return res;\n  }\n}\n"]}