{"version":3,"file":"numberFuncs.js","sourceRoot":"","sources":["../../../src/Number/numberFuncs.ts"],"names":[],"mappings":";;;AAAA,MAAM,yBAAyB,GAAG,YAAY,CAAC;AAC/C,MAAM,6BAA6B,GAAG,SAAS,CAAC;AAChD,MAAM,wBAAwB,GAAG,aAAa,CAAC;AAE/C,MAAM;AACN,SAAS,YAAY,CAAC,MAAc,EAAE,WAAoB;IACxD,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC7C,6CAA6C;IAC7C,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;IACvB,IAAI,WAAW,EAAE;QACf,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAChD,aAAa,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YAC9C,6CAA6C;YAC7C,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAK,WAAW,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;SAClE;KACF;IAED,sBAAsB;IACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KAC1E;IAED,MAAM,eAAe,GAAG,MAAM;SAC3B,OAAO,CAAC,yBAAyB,EAAE,EAAE,CAAC;SACtC,OAAO,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;IAE9C,kCAAkC;IAClC,IACE,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;WAChF,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EACvF;QACA,OAAO,eAAe,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KAC7C;IAED,OAAO,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;AAClF,CAAC;AACD;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,MAAuB,EAAE,WAAoB;IAC5E,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,OAAO,MAAM,CAAC;IAC9C,OAAO,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;AACnD,CAAC;AAHD,4CAGC;AAOD;;;;;;;;;GASG;AACH,SAAgB,QAAQ,CAAC,KAAc,EAAE,SAAyB,EAAE,GAAG,EAAE,IAAI,EAAE;IAC7E,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC5C,IAAI,CAAC,MAAM;QAAE,OAAO,IAAI,CAAC;IACzB,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAAE,OAAO,KAAK,CAAC;IAC5D,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IACzD,OAAO,IAAI,CAAC;AACd,CAAC;AAND,4BAMC","sourcesContent":["const REGEX_UNWANTED_CHARACTERS = /[^\\d\\-.,]/g;\nconst REGEX_DASHES_EXCEPT_BEGINNING = /(?!^)-/g;\nconst REGEX_PERIODS_EXEPT_LAST = /\\.(?=.*\\.)/g;\n\n/** */\nfunction formatNumber(number: string, thousandSep?: string): string {\n  if (typeof number !== 'string') return 'NaN';\n  // eslint-disable-next-line no-param-reassign\n  number = number.trim();\n  if (thousandSep) {\n    const thousandSplit = number.split(thousandSep);\n    thousandSplit.shift();\n    if (thousandSplit.every((s) => s.length === 3)) {\n      // eslint-disable-next-line no-param-reassign\n      number = number.replace(new RegExp(`\\\\${thousandSep}`, 'g'), '');\n    }\n  }\n\n  // Handle exponentials\n  if ((number.match(/e/g) ?? []).length === 1) {\n    const numberParts = number.split('e');\n    return `${formatNumber(numberParts[0])}e${formatNumber(numberParts[1])}`;\n  }\n\n  const sanitizedNumber = number\n    .replace(REGEX_UNWANTED_CHARACTERS, '')\n    .replace(REGEX_DASHES_EXCEPT_BEGINNING, '');\n\n  // Handle only thousands separator\n  if (\n    ((sanitizedNumber.match(/,/g) ?? []).length >= 2 && !sanitizedNumber.includes('.'))\n    || ((sanitizedNumber.match(/\\./g) ?? []).length >= 2 && !sanitizedNumber.includes(','))\n  ) {\n    return sanitizedNumber.replace(/[.,]/g, '');\n  }\n\n  return sanitizedNumber.replace(/,/g, '.').replace(REGEX_PERIODS_EXEPT_LAST, '');\n}\n/**\n * Parses a string to a number\n *\n * @param number\n * @returns\n */\nexport function parseStrToNumber(number: string | number, thousandSep?: string): number {\n  if (typeof number === 'number') return number;\n  return Number(formatNumber(number, thousandSep));\n}\n\ntype isNumberConfig = {\n  int?: boolean,\n  nan?: boolean\n}\n\n/**\n * Checks if is a number.\n *\n * IMPORANT!!!\n *\n * NAN returns false by default. You can change the behavior in the config param\n * @param value\n * @param config\n * @returns\n */\nexport function isNumber(value: unknown, config: isNumberConfig = { nan: true }): value is number {\n  if (typeof value !== 'number') return false;\n  if (!config) return true;\n  if (config.nan && Number.isNaN(Number(value))) return false;\n  if (config.int && !Number.isInteger(value)) return false;\n  return true;\n}\n"]}