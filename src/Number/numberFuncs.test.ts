import { parseStrToNumber } from './numberFuncs';

describe('Number function testing', () => {
  test('[parseStrToNumber]', () => {
    const cases: [string, number][] = [
      ['', 0],
      ['10.272.000', 10272000],
      ['10.312.000', 10312000],
      ['10.436.000', 10436000],
      ['10.569.000', 10569000],
      ['10.932.000', 10932000],
      ['10.977.000', 10977000],
      ['11.016.000', 11016000],
      ['1,22605', 1.22605],
      ['1,23', 1.23],
      ['1.685', 1.685],
      ['38.162', 38.162],
      ['398.195', 398.195],
      ['1.685.29', 168529],
      ['1,2300', 1.23],
      ['12.828.000', 12828000],
      ['1.851.000', 1851000],
      ['1.878.000', 1878000],
      ['2.577.000', 2577000],
      ['2.997.000', 2997000],
      ['-3.267.000', -3267000],
      ['-4.021.000', -4021000],
      ['5.437.000', 5437000],
      ['6.211.000', 6211000],
      ['6.598.000', 6598000],
      ['0,0000000000', 0],
      ['-12,0000000000', -12],
      ['-1206,0000000000', -1206],
      ['-13309,0000000000', -13309],
      ['-1660,0000000000', -1660],
      ['1749,0000000000', 1749],
      ['-21844,0000000000', -21844],
      ['2955,0000000000', 2955],
      ['-6863,0000000000', -6863],
      ['69817,0000000000', 69817],
      ['71566,0000000000', 71566],
      ['-8535,0000000000', -8535],
      ['91661,0000000000', 91661],
      ['0,0000000000', 0],
      ['-1073,0000000000', -1073],
      ['179899,0000000000', 179899],
      ['-21898,0000000000', -21898],
      ['-24578,0000000000', -24578],
      ['2680,0000000000', 2680],
      ['-314,0000000000', -314],
      ['61655,0000000000', 61655],
      ['83553,0000000000', 83553],
      ['89958,0000000000', 89958],
      ['91328,0000000000', 91328],
      ['-96346,0000000000', -96346],
      ['  96346,0000000000', 96346],
      ['  96346,0000000000    ', 96346],
      ['  -96346,0000000000', -96346],
      ['-96346,0000000000   ', -96346],
      ['  1.235.088', 1235088],
      ['1.235.088   ', 1235088],
      ['  1.235.088  ', 1235088],
      ['  1.235,088  ', 1235.088],
      ['notANumber', NaN],
      [new Date(), NaN],
      [100, 100],
    ] as any;

    for (const c of cases) {
      const [val, res] = c;
      expect(parseStrToNumber(val)).toEqual(res);
    }
  });

  test('[parseStrToNumber] With period as thousand separator ', () => {
    const cases: [string, number][] = [
      ['', 0],
      ['10.272.000', 10272000],
      ['10.312.000', 10312000],
      ['10.436.000', 10436000],
      ['10.569.000', 10569000],
      ['10.932.000', 10932000],
      ['10.977.000', 10977000],
      ['11.016.000', 11016000],
      ['1,22605', 1.22605],
      ['1,23', 1.23],
      ['1.685', 1685],
      ['38.162', 38162],
      ['398.195', 398195],
      ['1.685.29', 168529],
      ['1,2300', 1.23],
      ['12.828.000', 12828000],
      ['1.851.000', 1851000],
      ['1.878.000', 1878000],
      ['2.577.000', 2577000],
      ['2.997.000', 2997000],
      ['-3.267.000', -3267000],
      ['-4.021.000', -4021000],
      ['5.437.000', 5437000],
      ['6.211.000', 6211000],
      ['6.598.000', 6598000],
      ['0,0000000000', 0],
      ['-12,0000000000', -12],
      ['-1206,0000000000', -1206],
      ['-13309,0000000000', -13309],
      ['-1660,0000000000', -1660],
      ['1749,0000000000', 1749],
      ['-21844,0000000000', -21844],
      ['2955,0000000000', 2955],
      ['-6863,0000000000', -6863],
      ['69817,0000000000', 69817],
      ['71566,0000000000', 71566],
      ['-8535,0000000000', -8535],
      ['91661,0000000000', 91661],
      ['0,0000000000', 0],
      ['-1073,0000000000', -1073],
      ['179899,0000000000', 179899],
      ['-21898,0000000000', -21898],
      ['-24578,0000000000', -24578],
      ['2680,0000000000', 2680],
      ['-314,0000000000', -314],
      ['61655,0000000000', 61655],
      ['83553,0000000000', 83553],
      ['89958,0000000000', 89958],
      ['91328,0000000000', 91328],
      ['-96346,0000000000', -96346],
      ['  96346,0000000000', 96346],
      ['  96346,0000000000    ', 96346],
      ['  -96346,0000000000', -96346],
      ['-96346,0000000000   ', -96346],
      ['  1.235.088', 1235088],
      ['1.235.088   ', 1235088],
      ['  1.235.088  ', 1235088],
      ['  1.235,088  ', 1235.088],
      ['notANumber', NaN],
      [new Date(), NaN],
      [100, 100],
    ] as any;

    for (const c of cases) {
      const [val, res] = c;
      expect(parseStrToNumber(val, '.')).toEqual(res);
    }
  });
});
